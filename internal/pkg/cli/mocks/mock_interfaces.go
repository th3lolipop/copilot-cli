// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	encoding "encoding"
	session "github.com/aws/aws-sdk-go/aws/session"
	cloudformation "github.com/aws/copilot-cli/internal/pkg/aws/cloudformation"
	codepipeline "github.com/aws/copilot-cli/internal/pkg/aws/codepipeline"
	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	config "github.com/aws/copilot-cli/internal/pkg/config"
	deploy "github.com/aws/copilot-cli/internal/pkg/deploy"
	stack "github.com/aws/copilot-cli/internal/pkg/deploy/cloudformation/stack"
	describe "github.com/aws/copilot-cli/internal/pkg/describe"
	docker "github.com/aws/copilot-cli/internal/pkg/docker"
	dockerfile "github.com/aws/copilot-cli/internal/pkg/docker/dockerfile"
	initialize "github.com/aws/copilot-cli/internal/pkg/initialize"
	logging "github.com/aws/copilot-cli/internal/pkg/logging"
	repository "github.com/aws/copilot-cli/internal/pkg/repository"
	task "github.com/aws/copilot-cli/internal/pkg/task"
	command "github.com/aws/copilot-cli/internal/pkg/term/command"
	prompt "github.com/aws/copilot-cli/internal/pkg/term/prompt"
	selector "github.com/aws/copilot-cli/internal/pkg/term/selector"
	workspace "github.com/aws/copilot-cli/internal/pkg/workspace"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockactionCommand is a mock of actionCommand interface
type MockactionCommand struct {
	ctrl     *gomock.Controller
	recorder *MockactionCommandMockRecorder
}

// MockactionCommandMockRecorder is the mock recorder for MockactionCommand
type MockactionCommandMockRecorder struct {
	mock *MockactionCommand
}

// NewMockactionCommand creates a new mock instance
func NewMockactionCommand(ctrl *gomock.Controller) *MockactionCommand {
	mock := &MockactionCommand{ctrl: ctrl}
	mock.recorder = &MockactionCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockactionCommand) EXPECT() *MockactionCommandMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockactionCommand) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockactionCommandMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockactionCommand)(nil).Validate))
}

// Ask mocks base method
func (m *MockactionCommand) Ask() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ask indicates an expected call of Ask
func (mr *MockactionCommandMockRecorder) Ask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockactionCommand)(nil).Ask))
}

// Execute mocks base method
func (m *MockactionCommand) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockactionCommandMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockactionCommand)(nil).Execute))
}

// RecommendedActions mocks base method
func (m *MockactionCommand) RecommendedActions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendedActions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// RecommendedActions indicates an expected call of RecommendedActions
func (mr *MockactionCommandMockRecorder) RecommendedActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendedActions", reflect.TypeOf((*MockactionCommand)(nil).RecommendedActions))
}

// MockserviceStore is a mock of serviceStore interface
type MockserviceStore struct {
	ctrl     *gomock.Controller
	recorder *MockserviceStoreMockRecorder
}

// MockserviceStoreMockRecorder is the mock recorder for MockserviceStore
type MockserviceStoreMockRecorder struct {
	mock *MockserviceStore
}

// NewMockserviceStore creates a new mock instance
func NewMockserviceStore(ctrl *gomock.Controller) *MockserviceStore {
	mock := &MockserviceStore{ctrl: ctrl}
	mock.recorder = &MockserviceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockserviceStore) EXPECT() *MockserviceStoreMockRecorder {
	return m.recorder
}

// CreateService mocks base method
func (m *MockserviceStore) CreateService(svc *config.Workload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", svc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService
func (mr *MockserviceStoreMockRecorder) CreateService(svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockserviceStore)(nil).CreateService), svc)
}

// GetService mocks base method
func (m *MockserviceStore) GetService(appName, svcName string) (*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", appName, svcName)
	ret0, _ := ret[0].(*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockserviceStoreMockRecorder) GetService(appName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockserviceStore)(nil).GetService), appName, svcName)
}

// ListServices mocks base method
func (m *MockserviceStore) ListServices(appName string) ([]*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", appName)
	ret0, _ := ret[0].([]*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockserviceStoreMockRecorder) ListServices(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockserviceStore)(nil).ListServices), appName)
}

// DeleteService mocks base method
func (m *MockserviceStore) DeleteService(appName, svcName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", appName, svcName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockserviceStoreMockRecorder) DeleteService(appName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockserviceStore)(nil).DeleteService), appName, svcName)
}

// MockjobStore is a mock of jobStore interface
type MockjobStore struct {
	ctrl     *gomock.Controller
	recorder *MockjobStoreMockRecorder
}

// MockjobStoreMockRecorder is the mock recorder for MockjobStore
type MockjobStoreMockRecorder struct {
	mock *MockjobStore
}

// NewMockjobStore creates a new mock instance
func NewMockjobStore(ctrl *gomock.Controller) *MockjobStore {
	mock := &MockjobStore{ctrl: ctrl}
	mock.recorder = &MockjobStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockjobStore) EXPECT() *MockjobStoreMockRecorder {
	return m.recorder
}

// CreateJob mocks base method
func (m *MockjobStore) CreateJob(job *config.Workload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob
func (mr *MockjobStoreMockRecorder) CreateJob(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockjobStore)(nil).CreateJob), job)
}

// GetJob mocks base method
func (m *MockjobStore) GetJob(appName, jobName string) (*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", appName, jobName)
	ret0, _ := ret[0].(*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob
func (mr *MockjobStoreMockRecorder) GetJob(appName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockjobStore)(nil).GetJob), appName, jobName)
}

// ListJobs mocks base method
func (m *MockjobStore) ListJobs(appName string) ([]*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", appName)
	ret0, _ := ret[0].([]*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockjobStoreMockRecorder) ListJobs(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockjobStore)(nil).ListJobs), appName)
}

// DeleteJob mocks base method
func (m *MockjobStore) DeleteJob(appName, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", appName, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockjobStoreMockRecorder) DeleteJob(appName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockjobStore)(nil).DeleteJob), appName, jobName)
}

// MockwlStore is a mock of wlStore interface
type MockwlStore struct {
	ctrl     *gomock.Controller
	recorder *MockwlStoreMockRecorder
}

// MockwlStoreMockRecorder is the mock recorder for MockwlStore
type MockwlStoreMockRecorder struct {
	mock *MockwlStore
}

// NewMockwlStore creates a new mock instance
func NewMockwlStore(ctrl *gomock.Controller) *MockwlStore {
	mock := &MockwlStore{ctrl: ctrl}
	mock.recorder = &MockwlStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwlStore) EXPECT() *MockwlStoreMockRecorder {
	return m.recorder
}

// ListWorkloads mocks base method
func (m *MockwlStore) ListWorkloads(appName string) ([]*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloads", appName)
	ret0, _ := ret[0].([]*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloads indicates an expected call of ListWorkloads
func (mr *MockwlStoreMockRecorder) ListWorkloads(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloads", reflect.TypeOf((*MockwlStore)(nil).ListWorkloads), appName)
}

// GetWorkload mocks base method
func (m *MockwlStore) GetWorkload(appName, name string) (*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkload", appName, name)
	ret0, _ := ret[0].(*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload
func (mr *MockwlStoreMockRecorder) GetWorkload(appName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*MockwlStore)(nil).GetWorkload), appName, name)
}

// MockworkloadListWriter is a mock of workloadListWriter interface
type MockworkloadListWriter struct {
	ctrl     *gomock.Controller
	recorder *MockworkloadListWriterMockRecorder
}

// MockworkloadListWriterMockRecorder is the mock recorder for MockworkloadListWriter
type MockworkloadListWriterMockRecorder struct {
	mock *MockworkloadListWriter
}

// NewMockworkloadListWriter creates a new mock instance
func NewMockworkloadListWriter(ctrl *gomock.Controller) *MockworkloadListWriter {
	mock := &MockworkloadListWriter{ctrl: ctrl}
	mock.recorder = &MockworkloadListWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockworkloadListWriter) EXPECT() *MockworkloadListWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockworkloadListWriter) Write(appName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockworkloadListWriterMockRecorder) Write(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockworkloadListWriter)(nil).Write), appName)
}

// MockapplicationStore is a mock of applicationStore interface
type MockapplicationStore struct {
	ctrl     *gomock.Controller
	recorder *MockapplicationStoreMockRecorder
}

// MockapplicationStoreMockRecorder is the mock recorder for MockapplicationStore
type MockapplicationStoreMockRecorder struct {
	mock *MockapplicationStore
}

// NewMockapplicationStore creates a new mock instance
func NewMockapplicationStore(ctrl *gomock.Controller) *MockapplicationStore {
	mock := &MockapplicationStore{ctrl: ctrl}
	mock.recorder = &MockapplicationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockapplicationStore) EXPECT() *MockapplicationStoreMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method
func (m *MockapplicationStore) CreateApplication(app *config.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockapplicationStoreMockRecorder) CreateApplication(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockapplicationStore)(nil).CreateApplication), app)
}

// GetApplication mocks base method
func (m *MockapplicationStore) GetApplication(appName string) (*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", appName)
	ret0, _ := ret[0].(*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockapplicationStoreMockRecorder) GetApplication(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockapplicationStore)(nil).GetApplication), appName)
}

// ListApplications mocks base method
func (m *MockapplicationStore) ListApplications() ([]*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications")
	ret0, _ := ret[0].([]*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockapplicationStoreMockRecorder) ListApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockapplicationStore)(nil).ListApplications))
}

// DeleteApplication mocks base method
func (m *MockapplicationStore) DeleteApplication(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockapplicationStoreMockRecorder) DeleteApplication(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockapplicationStore)(nil).DeleteApplication), name)
}

// MockapplicationCreator is a mock of applicationCreator interface
type MockapplicationCreator struct {
	ctrl     *gomock.Controller
	recorder *MockapplicationCreatorMockRecorder
}

// MockapplicationCreatorMockRecorder is the mock recorder for MockapplicationCreator
type MockapplicationCreatorMockRecorder struct {
	mock *MockapplicationCreator
}

// NewMockapplicationCreator creates a new mock instance
func NewMockapplicationCreator(ctrl *gomock.Controller) *MockapplicationCreator {
	mock := &MockapplicationCreator{ctrl: ctrl}
	mock.recorder = &MockapplicationCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockapplicationCreator) EXPECT() *MockapplicationCreatorMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method
func (m *MockapplicationCreator) CreateApplication(app *config.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockapplicationCreatorMockRecorder) CreateApplication(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockapplicationCreator)(nil).CreateApplication), app)
}

// MockapplicationGetter is a mock of applicationGetter interface
type MockapplicationGetter struct {
	ctrl     *gomock.Controller
	recorder *MockapplicationGetterMockRecorder
}

// MockapplicationGetterMockRecorder is the mock recorder for MockapplicationGetter
type MockapplicationGetterMockRecorder struct {
	mock *MockapplicationGetter
}

// NewMockapplicationGetter creates a new mock instance
func NewMockapplicationGetter(ctrl *gomock.Controller) *MockapplicationGetter {
	mock := &MockapplicationGetter{ctrl: ctrl}
	mock.recorder = &MockapplicationGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockapplicationGetter) EXPECT() *MockapplicationGetterMockRecorder {
	return m.recorder
}

// GetApplication mocks base method
func (m *MockapplicationGetter) GetApplication(appName string) (*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", appName)
	ret0, _ := ret[0].(*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockapplicationGetterMockRecorder) GetApplication(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockapplicationGetter)(nil).GetApplication), appName)
}

// MockapplicationLister is a mock of applicationLister interface
type MockapplicationLister struct {
	ctrl     *gomock.Controller
	recorder *MockapplicationListerMockRecorder
}

// MockapplicationListerMockRecorder is the mock recorder for MockapplicationLister
type MockapplicationListerMockRecorder struct {
	mock *MockapplicationLister
}

// NewMockapplicationLister creates a new mock instance
func NewMockapplicationLister(ctrl *gomock.Controller) *MockapplicationLister {
	mock := &MockapplicationLister{ctrl: ctrl}
	mock.recorder = &MockapplicationListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockapplicationLister) EXPECT() *MockapplicationListerMockRecorder {
	return m.recorder
}

// ListApplications mocks base method
func (m *MockapplicationLister) ListApplications() ([]*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications")
	ret0, _ := ret[0].([]*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockapplicationListerMockRecorder) ListApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockapplicationLister)(nil).ListApplications))
}

// MockapplicationDeleter is a mock of applicationDeleter interface
type MockapplicationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockapplicationDeleterMockRecorder
}

// MockapplicationDeleterMockRecorder is the mock recorder for MockapplicationDeleter
type MockapplicationDeleterMockRecorder struct {
	mock *MockapplicationDeleter
}

// NewMockapplicationDeleter creates a new mock instance
func NewMockapplicationDeleter(ctrl *gomock.Controller) *MockapplicationDeleter {
	mock := &MockapplicationDeleter{ctrl: ctrl}
	mock.recorder = &MockapplicationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockapplicationDeleter) EXPECT() *MockapplicationDeleterMockRecorder {
	return m.recorder
}

// DeleteApplication mocks base method
func (m *MockapplicationDeleter) DeleteApplication(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockapplicationDeleterMockRecorder) DeleteApplication(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockapplicationDeleter)(nil).DeleteApplication), name)
}

// MockenvironmentStore is a mock of environmentStore interface
type MockenvironmentStore struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentStoreMockRecorder
}

// MockenvironmentStoreMockRecorder is the mock recorder for MockenvironmentStore
type MockenvironmentStoreMockRecorder struct {
	mock *MockenvironmentStore
}

// NewMockenvironmentStore creates a new mock instance
func NewMockenvironmentStore(ctrl *gomock.Controller) *MockenvironmentStore {
	mock := &MockenvironmentStore{ctrl: ctrl}
	mock.recorder = &MockenvironmentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvironmentStore) EXPECT() *MockenvironmentStoreMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method
func (m *MockenvironmentStore) CreateEnvironment(env *config.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockenvironmentStoreMockRecorder) CreateEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockenvironmentStore)(nil).CreateEnvironment), env)
}

// GetEnvironment mocks base method
func (m *MockenvironmentStore) GetEnvironment(appName, environmentName string) (*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", appName, environmentName)
	ret0, _ := ret[0].(*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockenvironmentStoreMockRecorder) GetEnvironment(appName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockenvironmentStore)(nil).GetEnvironment), appName, environmentName)
}

// ListEnvironments mocks base method
func (m *MockenvironmentStore) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockenvironmentStoreMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockenvironmentStore)(nil).ListEnvironments), appName)
}

// DeleteEnvironment mocks base method
func (m *MockenvironmentStore) DeleteEnvironment(appName, environmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", appName, environmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockenvironmentStoreMockRecorder) DeleteEnvironment(appName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockenvironmentStore)(nil).DeleteEnvironment), appName, environmentName)
}

// MockenvironmentCreator is a mock of environmentCreator interface
type MockenvironmentCreator struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentCreatorMockRecorder
}

// MockenvironmentCreatorMockRecorder is the mock recorder for MockenvironmentCreator
type MockenvironmentCreatorMockRecorder struct {
	mock *MockenvironmentCreator
}

// NewMockenvironmentCreator creates a new mock instance
func NewMockenvironmentCreator(ctrl *gomock.Controller) *MockenvironmentCreator {
	mock := &MockenvironmentCreator{ctrl: ctrl}
	mock.recorder = &MockenvironmentCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvironmentCreator) EXPECT() *MockenvironmentCreatorMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method
func (m *MockenvironmentCreator) CreateEnvironment(env *config.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockenvironmentCreatorMockRecorder) CreateEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockenvironmentCreator)(nil).CreateEnvironment), env)
}

// MockenvironmentGetter is a mock of environmentGetter interface
type MockenvironmentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentGetterMockRecorder
}

// MockenvironmentGetterMockRecorder is the mock recorder for MockenvironmentGetter
type MockenvironmentGetterMockRecorder struct {
	mock *MockenvironmentGetter
}

// NewMockenvironmentGetter creates a new mock instance
func NewMockenvironmentGetter(ctrl *gomock.Controller) *MockenvironmentGetter {
	mock := &MockenvironmentGetter{ctrl: ctrl}
	mock.recorder = &MockenvironmentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvironmentGetter) EXPECT() *MockenvironmentGetterMockRecorder {
	return m.recorder
}

// GetEnvironment mocks base method
func (m *MockenvironmentGetter) GetEnvironment(appName, environmentName string) (*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", appName, environmentName)
	ret0, _ := ret[0].(*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockenvironmentGetterMockRecorder) GetEnvironment(appName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockenvironmentGetter)(nil).GetEnvironment), appName, environmentName)
}

// MockenvironmentLister is a mock of environmentLister interface
type MockenvironmentLister struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentListerMockRecorder
}

// MockenvironmentListerMockRecorder is the mock recorder for MockenvironmentLister
type MockenvironmentListerMockRecorder struct {
	mock *MockenvironmentLister
}

// NewMockenvironmentLister creates a new mock instance
func NewMockenvironmentLister(ctrl *gomock.Controller) *MockenvironmentLister {
	mock := &MockenvironmentLister{ctrl: ctrl}
	mock.recorder = &MockenvironmentListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvironmentLister) EXPECT() *MockenvironmentListerMockRecorder {
	return m.recorder
}

// ListEnvironments mocks base method
func (m *MockenvironmentLister) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockenvironmentListerMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockenvironmentLister)(nil).ListEnvironments), appName)
}

// MockenvironmentDeleter is a mock of environmentDeleter interface
type MockenvironmentDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentDeleterMockRecorder
}

// MockenvironmentDeleterMockRecorder is the mock recorder for MockenvironmentDeleter
type MockenvironmentDeleterMockRecorder struct {
	mock *MockenvironmentDeleter
}

// NewMockenvironmentDeleter creates a new mock instance
func NewMockenvironmentDeleter(ctrl *gomock.Controller) *MockenvironmentDeleter {
	mock := &MockenvironmentDeleter{ctrl: ctrl}
	mock.recorder = &MockenvironmentDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvironmentDeleter) EXPECT() *MockenvironmentDeleterMockRecorder {
	return m.recorder
}

// DeleteEnvironment mocks base method
func (m *MockenvironmentDeleter) DeleteEnvironment(appName, environmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", appName, environmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockenvironmentDeleterMockRecorder) DeleteEnvironment(appName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockenvironmentDeleter)(nil).DeleteEnvironment), appName, environmentName)
}

// Mockstore is a mock of store interface
type Mockstore struct {
	ctrl     *gomock.Controller
	recorder *MockstoreMockRecorder
}

// MockstoreMockRecorder is the mock recorder for Mockstore
type MockstoreMockRecorder struct {
	mock *Mockstore
}

// NewMockstore creates a new mock instance
func NewMockstore(ctrl *gomock.Controller) *Mockstore {
	mock := &Mockstore{ctrl: ctrl}
	mock.recorder = &MockstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockstore) EXPECT() *MockstoreMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method
func (m *Mockstore) CreateApplication(app *config.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockstoreMockRecorder) CreateApplication(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*Mockstore)(nil).CreateApplication), app)
}

// GetApplication mocks base method
func (m *Mockstore) GetApplication(appName string) (*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", appName)
	ret0, _ := ret[0].(*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockstoreMockRecorder) GetApplication(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*Mockstore)(nil).GetApplication), appName)
}

// ListApplications mocks base method
func (m *Mockstore) ListApplications() ([]*config.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications")
	ret0, _ := ret[0].([]*config.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockstoreMockRecorder) ListApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*Mockstore)(nil).ListApplications))
}

// DeleteApplication mocks base method
func (m *Mockstore) DeleteApplication(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockstoreMockRecorder) DeleteApplication(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*Mockstore)(nil).DeleteApplication), name)
}

// CreateEnvironment mocks base method
func (m *Mockstore) CreateEnvironment(env *config.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockstoreMockRecorder) CreateEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*Mockstore)(nil).CreateEnvironment), env)
}

// GetEnvironment mocks base method
func (m *Mockstore) GetEnvironment(appName, environmentName string) (*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", appName, environmentName)
	ret0, _ := ret[0].(*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockstoreMockRecorder) GetEnvironment(appName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*Mockstore)(nil).GetEnvironment), appName, environmentName)
}

// ListEnvironments mocks base method
func (m *Mockstore) ListEnvironments(appName string) ([]*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", appName)
	ret0, _ := ret[0].([]*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockstoreMockRecorder) ListEnvironments(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*Mockstore)(nil).ListEnvironments), appName)
}

// DeleteEnvironment mocks base method
func (m *Mockstore) DeleteEnvironment(appName, environmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", appName, environmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockstoreMockRecorder) DeleteEnvironment(appName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*Mockstore)(nil).DeleteEnvironment), appName, environmentName)
}

// CreateService mocks base method
func (m *Mockstore) CreateService(svc *config.Workload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", svc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService
func (mr *MockstoreMockRecorder) CreateService(svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*Mockstore)(nil).CreateService), svc)
}

// GetService mocks base method
func (m *Mockstore) GetService(appName, svcName string) (*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", appName, svcName)
	ret0, _ := ret[0].(*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockstoreMockRecorder) GetService(appName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*Mockstore)(nil).GetService), appName, svcName)
}

// ListServices mocks base method
func (m *Mockstore) ListServices(appName string) ([]*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", appName)
	ret0, _ := ret[0].([]*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockstoreMockRecorder) ListServices(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*Mockstore)(nil).ListServices), appName)
}

// DeleteService mocks base method
func (m *Mockstore) DeleteService(appName, svcName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", appName, svcName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockstoreMockRecorder) DeleteService(appName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*Mockstore)(nil).DeleteService), appName, svcName)
}

// CreateJob mocks base method
func (m *Mockstore) CreateJob(job *config.Workload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob
func (mr *MockstoreMockRecorder) CreateJob(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*Mockstore)(nil).CreateJob), job)
}

// GetJob mocks base method
func (m *Mockstore) GetJob(appName, jobName string) (*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", appName, jobName)
	ret0, _ := ret[0].(*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob
func (mr *MockstoreMockRecorder) GetJob(appName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*Mockstore)(nil).GetJob), appName, jobName)
}

// ListJobs mocks base method
func (m *Mockstore) ListJobs(appName string) ([]*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", appName)
	ret0, _ := ret[0].([]*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockstoreMockRecorder) ListJobs(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*Mockstore)(nil).ListJobs), appName)
}

// DeleteJob mocks base method
func (m *Mockstore) DeleteJob(appName, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", appName, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockstoreMockRecorder) DeleteJob(appName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*Mockstore)(nil).DeleteJob), appName, jobName)
}

// ListWorkloads mocks base method
func (m *Mockstore) ListWorkloads(appName string) ([]*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloads", appName)
	ret0, _ := ret[0].([]*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloads indicates an expected call of ListWorkloads
func (mr *MockstoreMockRecorder) ListWorkloads(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloads", reflect.TypeOf((*Mockstore)(nil).ListWorkloads), appName)
}

// GetWorkload mocks base method
func (m *Mockstore) GetWorkload(appName, name string) (*config.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkload", appName, name)
	ret0, _ := ret[0].(*config.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload
func (mr *MockstoreMockRecorder) GetWorkload(appName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*Mockstore)(nil).GetWorkload), appName, name)
}

// MockdeployedEnvironmentLister is a mock of deployedEnvironmentLister interface
type MockdeployedEnvironmentLister struct {
	ctrl     *gomock.Controller
	recorder *MockdeployedEnvironmentListerMockRecorder
}

// MockdeployedEnvironmentListerMockRecorder is the mock recorder for MockdeployedEnvironmentLister
type MockdeployedEnvironmentListerMockRecorder struct {
	mock *MockdeployedEnvironmentLister
}

// NewMockdeployedEnvironmentLister creates a new mock instance
func NewMockdeployedEnvironmentLister(ctrl *gomock.Controller) *MockdeployedEnvironmentLister {
	mock := &MockdeployedEnvironmentLister{ctrl: ctrl}
	mock.recorder = &MockdeployedEnvironmentListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdeployedEnvironmentLister) EXPECT() *MockdeployedEnvironmentListerMockRecorder {
	return m.recorder
}

// ListEnvironmentsDeployedTo mocks base method
func (m *MockdeployedEnvironmentLister) ListEnvironmentsDeployedTo(appName, svcName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsDeployedTo", appName, svcName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsDeployedTo indicates an expected call of ListEnvironmentsDeployedTo
func (mr *MockdeployedEnvironmentListerMockRecorder) ListEnvironmentsDeployedTo(appName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsDeployedTo", reflect.TypeOf((*MockdeployedEnvironmentLister)(nil).ListEnvironmentsDeployedTo), appName, svcName)
}

// ListDeployedServices mocks base method
func (m *MockdeployedEnvironmentLister) ListDeployedServices(appName, envName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployedServices", appName, envName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployedServices indicates an expected call of ListDeployedServices
func (mr *MockdeployedEnvironmentListerMockRecorder) ListDeployedServices(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployedServices", reflect.TypeOf((*MockdeployedEnvironmentLister)(nil).ListDeployedServices), appName, envName)
}

// IsServiceDeployed mocks base method
func (m *MockdeployedEnvironmentLister) IsServiceDeployed(appName, envName, svcName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceDeployed", appName, envName, svcName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceDeployed indicates an expected call of IsServiceDeployed
func (mr *MockdeployedEnvironmentListerMockRecorder) IsServiceDeployed(appName, envName, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceDeployed", reflect.TypeOf((*MockdeployedEnvironmentLister)(nil).IsServiceDeployed), appName, envName, svcName)
}

// MocksecretsManager is a mock of secretsManager interface
type MocksecretsManager struct {
	ctrl     *gomock.Controller
	recorder *MocksecretsManagerMockRecorder
}

// MocksecretsManagerMockRecorder is the mock recorder for MocksecretsManager
type MocksecretsManagerMockRecorder struct {
	mock *MocksecretsManager
}

// NewMocksecretsManager creates a new mock instance
func NewMocksecretsManager(ctrl *gomock.Controller) *MocksecretsManager {
	mock := &MocksecretsManager{ctrl: ctrl}
	mock.recorder = &MocksecretsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksecretsManager) EXPECT() *MocksecretsManagerMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method
func (m *MocksecretsManager) CreateSecret(secretName, secretString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", secretName, secretString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MocksecretsManagerMockRecorder) CreateSecret(secretName, secretString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MocksecretsManager)(nil).CreateSecret), secretName, secretString)
}

// DeleteSecret mocks base method
func (m *MocksecretsManager) DeleteSecret(secretName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", secretName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MocksecretsManagerMockRecorder) DeleteSecret(secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MocksecretsManager)(nil).DeleteSecret), secretName)
}

// MocksecretCreator is a mock of secretCreator interface
type MocksecretCreator struct {
	ctrl     *gomock.Controller
	recorder *MocksecretCreatorMockRecorder
}

// MocksecretCreatorMockRecorder is the mock recorder for MocksecretCreator
type MocksecretCreatorMockRecorder struct {
	mock *MocksecretCreator
}

// NewMocksecretCreator creates a new mock instance
func NewMocksecretCreator(ctrl *gomock.Controller) *MocksecretCreator {
	mock := &MocksecretCreator{ctrl: ctrl}
	mock.recorder = &MocksecretCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksecretCreator) EXPECT() *MocksecretCreatorMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method
func (m *MocksecretCreator) CreateSecret(secretName, secretString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", secretName, secretString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MocksecretCreatorMockRecorder) CreateSecret(secretName, secretString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MocksecretCreator)(nil).CreateSecret), secretName, secretString)
}

// MocksecretDeleter is a mock of secretDeleter interface
type MocksecretDeleter struct {
	ctrl     *gomock.Controller
	recorder *MocksecretDeleterMockRecorder
}

// MocksecretDeleterMockRecorder is the mock recorder for MocksecretDeleter
type MocksecretDeleterMockRecorder struct {
	mock *MocksecretDeleter
}

// NewMocksecretDeleter creates a new mock instance
func NewMocksecretDeleter(ctrl *gomock.Controller) *MocksecretDeleter {
	mock := &MocksecretDeleter{ctrl: ctrl}
	mock.recorder = &MocksecretDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksecretDeleter) EXPECT() *MocksecretDeleterMockRecorder {
	return m.recorder
}

// DeleteSecret mocks base method
func (m *MocksecretDeleter) DeleteSecret(secretName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", secretName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MocksecretDeleterMockRecorder) DeleteSecret(secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MocksecretDeleter)(nil).DeleteSecret), secretName)
}

// MockimageBuilderPusher is a mock of imageBuilderPusher interface
type MockimageBuilderPusher struct {
	ctrl     *gomock.Controller
	recorder *MockimageBuilderPusherMockRecorder
}

// MockimageBuilderPusherMockRecorder is the mock recorder for MockimageBuilderPusher
type MockimageBuilderPusherMockRecorder struct {
	mock *MockimageBuilderPusher
}

// NewMockimageBuilderPusher creates a new mock instance
func NewMockimageBuilderPusher(ctrl *gomock.Controller) *MockimageBuilderPusher {
	mock := &MockimageBuilderPusher{ctrl: ctrl}
	mock.recorder = &MockimageBuilderPusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockimageBuilderPusher) EXPECT() *MockimageBuilderPusherMockRecorder {
	return m.recorder
}

// BuildAndPush mocks base method
func (m *MockimageBuilderPusher) BuildAndPush(docker repository.ContainerLoginBuildPusher, args *docker.BuildArguments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndPush", docker, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildAndPush indicates an expected call of BuildAndPush
func (mr *MockimageBuilderPusherMockRecorder) BuildAndPush(docker, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndPush", reflect.TypeOf((*MockimageBuilderPusher)(nil).BuildAndPush), docker, args)
}

// MockrepositoryURIGetter is a mock of repositoryURIGetter interface
type MockrepositoryURIGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryURIGetterMockRecorder
}

// MockrepositoryURIGetterMockRecorder is the mock recorder for MockrepositoryURIGetter
type MockrepositoryURIGetterMockRecorder struct {
	mock *MockrepositoryURIGetter
}

// NewMockrepositoryURIGetter creates a new mock instance
func NewMockrepositoryURIGetter(ctrl *gomock.Controller) *MockrepositoryURIGetter {
	mock := &MockrepositoryURIGetter{ctrl: ctrl}
	mock.recorder = &MockrepositoryURIGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrepositoryURIGetter) EXPECT() *MockrepositoryURIGetterMockRecorder {
	return m.recorder
}

// URI mocks base method
func (m *MockrepositoryURIGetter) URI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URI")
	ret0, _ := ret[0].(string)
	return ret0
}

// URI indicates an expected call of URI
func (mr *MockrepositoryURIGetterMockRecorder) URI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URI", reflect.TypeOf((*MockrepositoryURIGetter)(nil).URI))
}

// MockrepositoryService is a mock of repositoryService interface
type MockrepositoryService struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryServiceMockRecorder
}

// MockrepositoryServiceMockRecorder is the mock recorder for MockrepositoryService
type MockrepositoryServiceMockRecorder struct {
	mock *MockrepositoryService
}

// NewMockrepositoryService creates a new mock instance
func NewMockrepositoryService(ctrl *gomock.Controller) *MockrepositoryService {
	mock := &MockrepositoryService{ctrl: ctrl}
	mock.recorder = &MockrepositoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrepositoryService) EXPECT() *MockrepositoryServiceMockRecorder {
	return m.recorder
}

// URI mocks base method
func (m *MockrepositoryService) URI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URI")
	ret0, _ := ret[0].(string)
	return ret0
}

// URI indicates an expected call of URI
func (mr *MockrepositoryServiceMockRecorder) URI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URI", reflect.TypeOf((*MockrepositoryService)(nil).URI))
}

// BuildAndPush mocks base method
func (m *MockrepositoryService) BuildAndPush(docker repository.ContainerLoginBuildPusher, args *docker.BuildArguments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndPush", docker, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildAndPush indicates an expected call of BuildAndPush
func (mr *MockrepositoryServiceMockRecorder) BuildAndPush(docker, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndPush", reflect.TypeOf((*MockrepositoryService)(nil).BuildAndPush), docker, args)
}

// MocklogEventsWriter is a mock of logEventsWriter interface
type MocklogEventsWriter struct {
	ctrl     *gomock.Controller
	recorder *MocklogEventsWriterMockRecorder
}

// MocklogEventsWriterMockRecorder is the mock recorder for MocklogEventsWriter
type MocklogEventsWriterMockRecorder struct {
	mock *MocklogEventsWriter
}

// NewMocklogEventsWriter creates a new mock instance
func NewMocklogEventsWriter(ctrl *gomock.Controller) *MocklogEventsWriter {
	mock := &MocklogEventsWriter{ctrl: ctrl}
	mock.recorder = &MocklogEventsWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocklogEventsWriter) EXPECT() *MocklogEventsWriterMockRecorder {
	return m.recorder
}

// WriteLogEvents mocks base method
func (m *MocklogEventsWriter) WriteLogEvents(opts logging.WriteLogEventsOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLogEvents", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLogEvents indicates an expected call of WriteLogEvents
func (mr *MocklogEventsWriterMockRecorder) WriteLogEvents(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLogEvents", reflect.TypeOf((*MocklogEventsWriter)(nil).WriteLogEvents), opts)
}

// Mocktemplater is a mock of templater interface
type Mocktemplater struct {
	ctrl     *gomock.Controller
	recorder *MocktemplaterMockRecorder
}

// MocktemplaterMockRecorder is the mock recorder for Mocktemplater
type MocktemplaterMockRecorder struct {
	mock *Mocktemplater
}

// NewMocktemplater creates a new mock instance
func NewMocktemplater(ctrl *gomock.Controller) *Mocktemplater {
	mock := &Mocktemplater{ctrl: ctrl}
	mock.recorder = &MocktemplaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mocktemplater) EXPECT() *MocktemplaterMockRecorder {
	return m.recorder
}

// Template mocks base method
func (m *Mocktemplater) Template() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template
func (mr *MocktemplaterMockRecorder) Template() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*Mocktemplater)(nil).Template))
}

// MockstackSerializer is a mock of stackSerializer interface
type MockstackSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockstackSerializerMockRecorder
}

// MockstackSerializerMockRecorder is the mock recorder for MockstackSerializer
type MockstackSerializerMockRecorder struct {
	mock *MockstackSerializer
}

// NewMockstackSerializer creates a new mock instance
func NewMockstackSerializer(ctrl *gomock.Controller) *MockstackSerializer {
	mock := &MockstackSerializer{ctrl: ctrl}
	mock.recorder = &MockstackSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstackSerializer) EXPECT() *MockstackSerializerMockRecorder {
	return m.recorder
}

// Template mocks base method
func (m *MockstackSerializer) Template() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template
func (mr *MockstackSerializerMockRecorder) Template() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockstackSerializer)(nil).Template))
}

// SerializedParameters mocks base method
func (m *MockstackSerializer) SerializedParameters() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializedParameters")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerializedParameters indicates an expected call of SerializedParameters
func (mr *MockstackSerializerMockRecorder) SerializedParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializedParameters", reflect.TypeOf((*MockstackSerializer)(nil).SerializedParameters))
}

// Mockrunner is a mock of runner interface
type Mockrunner struct {
	ctrl     *gomock.Controller
	recorder *MockrunnerMockRecorder
}

// MockrunnerMockRecorder is the mock recorder for Mockrunner
type MockrunnerMockRecorder struct {
	mock *Mockrunner
}

// NewMockrunner creates a new mock instance
func NewMockrunner(ctrl *gomock.Controller) *Mockrunner {
	mock := &Mockrunner{ctrl: ctrl}
	mock.recorder = &MockrunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockrunner) EXPECT() *MockrunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *Mockrunner) Run(name string, args []string, options ...command.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, args}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockrunnerMockRecorder) Run(name, args interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, args}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockrunner)(nil).Run), varargs...)
}

// MockeventsWriter is a mock of eventsWriter interface
type MockeventsWriter struct {
	ctrl     *gomock.Controller
	recorder *MockeventsWriterMockRecorder
}

// MockeventsWriterMockRecorder is the mock recorder for MockeventsWriter
type MockeventsWriterMockRecorder struct {
	mock *MockeventsWriter
}

// NewMockeventsWriter creates a new mock instance
func NewMockeventsWriter(ctrl *gomock.Controller) *MockeventsWriter {
	mock := &MockeventsWriter{ctrl: ctrl}
	mock.recorder = &MockeventsWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockeventsWriter) EXPECT() *MockeventsWriterMockRecorder {
	return m.recorder
}

// WriteEventsUntilStopped mocks base method
func (m *MockeventsWriter) WriteEventsUntilStopped() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEventsUntilStopped")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEventsUntilStopped indicates an expected call of WriteEventsUntilStopped
func (mr *MockeventsWriterMockRecorder) WriteEventsUntilStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEventsUntilStopped", reflect.TypeOf((*MockeventsWriter)(nil).WriteEventsUntilStopped))
}

// MockdefaultSessionProvider is a mock of defaultSessionProvider interface
type MockdefaultSessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdefaultSessionProviderMockRecorder
}

// MockdefaultSessionProviderMockRecorder is the mock recorder for MockdefaultSessionProvider
type MockdefaultSessionProviderMockRecorder struct {
	mock *MockdefaultSessionProvider
}

// NewMockdefaultSessionProvider creates a new mock instance
func NewMockdefaultSessionProvider(ctrl *gomock.Controller) *MockdefaultSessionProvider {
	mock := &MockdefaultSessionProvider{ctrl: ctrl}
	mock.recorder = &MockdefaultSessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdefaultSessionProvider) EXPECT() *MockdefaultSessionProviderMockRecorder {
	return m.recorder
}

// Default mocks base method
func (m *MockdefaultSessionProvider) Default() (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Default")
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Default indicates an expected call of Default
func (mr *MockdefaultSessionProviderMockRecorder) Default() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Default", reflect.TypeOf((*MockdefaultSessionProvider)(nil).Default))
}

// MockregionalSessionProvider is a mock of regionalSessionProvider interface
type MockregionalSessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockregionalSessionProviderMockRecorder
}

// MockregionalSessionProviderMockRecorder is the mock recorder for MockregionalSessionProvider
type MockregionalSessionProviderMockRecorder struct {
	mock *MockregionalSessionProvider
}

// NewMockregionalSessionProvider creates a new mock instance
func NewMockregionalSessionProvider(ctrl *gomock.Controller) *MockregionalSessionProvider {
	mock := &MockregionalSessionProvider{ctrl: ctrl}
	mock.recorder = &MockregionalSessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockregionalSessionProvider) EXPECT() *MockregionalSessionProviderMockRecorder {
	return m.recorder
}

// DefaultWithRegion mocks base method
func (m *MockregionalSessionProvider) DefaultWithRegion(region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultWithRegion", region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultWithRegion indicates an expected call of DefaultWithRegion
func (mr *MockregionalSessionProviderMockRecorder) DefaultWithRegion(region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultWithRegion", reflect.TypeOf((*MockregionalSessionProvider)(nil).DefaultWithRegion), region)
}

// MocksessionFromRoleProvider is a mock of sessionFromRoleProvider interface
type MocksessionFromRoleProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksessionFromRoleProviderMockRecorder
}

// MocksessionFromRoleProviderMockRecorder is the mock recorder for MocksessionFromRoleProvider
type MocksessionFromRoleProviderMockRecorder struct {
	mock *MocksessionFromRoleProvider
}

// NewMocksessionFromRoleProvider creates a new mock instance
func NewMocksessionFromRoleProvider(ctrl *gomock.Controller) *MocksessionFromRoleProvider {
	mock := &MocksessionFromRoleProvider{ctrl: ctrl}
	mock.recorder = &MocksessionFromRoleProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionFromRoleProvider) EXPECT() *MocksessionFromRoleProviderMockRecorder {
	return m.recorder
}

// FromRole mocks base method
func (m *MocksessionFromRoleProvider) FromRole(roleARN, region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromRole", roleARN, region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromRole indicates an expected call of FromRole
func (mr *MocksessionFromRoleProviderMockRecorder) FromRole(roleARN, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromRole", reflect.TypeOf((*MocksessionFromRoleProvider)(nil).FromRole), roleARN, region)
}

// MocksessionFromStaticProvider is a mock of sessionFromStaticProvider interface
type MocksessionFromStaticProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksessionFromStaticProviderMockRecorder
}

// MocksessionFromStaticProviderMockRecorder is the mock recorder for MocksessionFromStaticProvider
type MocksessionFromStaticProviderMockRecorder struct {
	mock *MocksessionFromStaticProvider
}

// NewMocksessionFromStaticProvider creates a new mock instance
func NewMocksessionFromStaticProvider(ctrl *gomock.Controller) *MocksessionFromStaticProvider {
	mock := &MocksessionFromStaticProvider{ctrl: ctrl}
	mock.recorder = &MocksessionFromStaticProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionFromStaticProvider) EXPECT() *MocksessionFromStaticProviderMockRecorder {
	return m.recorder
}

// FromStaticCreds mocks base method
func (m *MocksessionFromStaticProvider) FromStaticCreds(accessKeyID, secretAccessKey, sessionToken string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromStaticCreds", accessKeyID, secretAccessKey, sessionToken)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromStaticCreds indicates an expected call of FromStaticCreds
func (mr *MocksessionFromStaticProviderMockRecorder) FromStaticCreds(accessKeyID, secretAccessKey, sessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromStaticCreds", reflect.TypeOf((*MocksessionFromStaticProvider)(nil).FromStaticCreds), accessKeyID, secretAccessKey, sessionToken)
}

// MocksessionFromProfileProvider is a mock of sessionFromProfileProvider interface
type MocksessionFromProfileProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksessionFromProfileProviderMockRecorder
}

// MocksessionFromProfileProviderMockRecorder is the mock recorder for MocksessionFromProfileProvider
type MocksessionFromProfileProviderMockRecorder struct {
	mock *MocksessionFromProfileProvider
}

// NewMocksessionFromProfileProvider creates a new mock instance
func NewMocksessionFromProfileProvider(ctrl *gomock.Controller) *MocksessionFromProfileProvider {
	mock := &MocksessionFromProfileProvider{ctrl: ctrl}
	mock.recorder = &MocksessionFromProfileProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionFromProfileProvider) EXPECT() *MocksessionFromProfileProviderMockRecorder {
	return m.recorder
}

// FromProfile mocks base method
func (m *MocksessionFromProfileProvider) FromProfile(name string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromProfile", name)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromProfile indicates an expected call of FromProfile
func (mr *MocksessionFromProfileProviderMockRecorder) FromProfile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromProfile", reflect.TypeOf((*MocksessionFromProfileProvider)(nil).FromProfile), name)
}

// MocksessionProvider is a mock of sessionProvider interface
type MocksessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksessionProviderMockRecorder
}

// MocksessionProviderMockRecorder is the mock recorder for MocksessionProvider
type MocksessionProviderMockRecorder struct {
	mock *MocksessionProvider
}

// NewMocksessionProvider creates a new mock instance
func NewMocksessionProvider(ctrl *gomock.Controller) *MocksessionProvider {
	mock := &MocksessionProvider{ctrl: ctrl}
	mock.recorder = &MocksessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionProvider) EXPECT() *MocksessionProviderMockRecorder {
	return m.recorder
}

// Default mocks base method
func (m *MocksessionProvider) Default() (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Default")
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Default indicates an expected call of Default
func (mr *MocksessionProviderMockRecorder) Default() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Default", reflect.TypeOf((*MocksessionProvider)(nil).Default))
}

// DefaultWithRegion mocks base method
func (m *MocksessionProvider) DefaultWithRegion(region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultWithRegion", region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultWithRegion indicates an expected call of DefaultWithRegion
func (mr *MocksessionProviderMockRecorder) DefaultWithRegion(region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultWithRegion", reflect.TypeOf((*MocksessionProvider)(nil).DefaultWithRegion), region)
}

// FromRole mocks base method
func (m *MocksessionProvider) FromRole(roleARN, region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromRole", roleARN, region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromRole indicates an expected call of FromRole
func (mr *MocksessionProviderMockRecorder) FromRole(roleARN, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromRole", reflect.TypeOf((*MocksessionProvider)(nil).FromRole), roleARN, region)
}

// FromProfile mocks base method
func (m *MocksessionProvider) FromProfile(name string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromProfile", name)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromProfile indicates an expected call of FromProfile
func (mr *MocksessionProviderMockRecorder) FromProfile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromProfile", reflect.TypeOf((*MocksessionProvider)(nil).FromProfile), name)
}

// FromStaticCreds mocks base method
func (m *MocksessionProvider) FromStaticCreds(accessKeyID, secretAccessKey, sessionToken string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromStaticCreds", accessKeyID, secretAccessKey, sessionToken)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromStaticCreds indicates an expected call of FromStaticCreds
func (mr *MocksessionProviderMockRecorder) FromStaticCreds(accessKeyID, secretAccessKey, sessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromStaticCreds", reflect.TypeOf((*MocksessionProvider)(nil).FromStaticCreds), accessKeyID, secretAccessKey, sessionToken)
}

// Mockdescriber is a mock of describer interface
type Mockdescriber struct {
	ctrl     *gomock.Controller
	recorder *MockdescriberMockRecorder
}

// MockdescriberMockRecorder is the mock recorder for Mockdescriber
type MockdescriberMockRecorder struct {
	mock *Mockdescriber
}

// NewMockdescriber creates a new mock instance
func NewMockdescriber(ctrl *gomock.Controller) *Mockdescriber {
	mock := &Mockdescriber{ctrl: ctrl}
	mock.recorder = &MockdescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockdescriber) EXPECT() *MockdescriberMockRecorder {
	return m.recorder
}

// Describe mocks base method
func (m *Mockdescriber) Describe() (describe.HumanJSONStringer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe")
	ret0, _ := ret[0].(describe.HumanJSONStringer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe
func (mr *MockdescriberMockRecorder) Describe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*Mockdescriber)(nil).Describe))
}

// MockwsFileDeleter is a mock of wsFileDeleter interface
type MockwsFileDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockwsFileDeleterMockRecorder
}

// MockwsFileDeleterMockRecorder is the mock recorder for MockwsFileDeleter
type MockwsFileDeleterMockRecorder struct {
	mock *MockwsFileDeleter
}

// NewMockwsFileDeleter creates a new mock instance
func NewMockwsFileDeleter(ctrl *gomock.Controller) *MockwsFileDeleter {
	mock := &MockwsFileDeleter{ctrl: ctrl}
	mock.recorder = &MockwsFileDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsFileDeleter) EXPECT() *MockwsFileDeleterMockRecorder {
	return m.recorder
}

// DeleteWorkspaceFile mocks base method
func (m *MockwsFileDeleter) DeleteWorkspaceFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspaceFile indicates an expected call of DeleteWorkspaceFile
func (mr *MockwsFileDeleterMockRecorder) DeleteWorkspaceFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceFile", reflect.TypeOf((*MockwsFileDeleter)(nil).DeleteWorkspaceFile))
}

// MocksvcManifestReader is a mock of svcManifestReader interface
type MocksvcManifestReader struct {
	ctrl     *gomock.Controller
	recorder *MocksvcManifestReaderMockRecorder
}

// MocksvcManifestReaderMockRecorder is the mock recorder for MocksvcManifestReader
type MocksvcManifestReaderMockRecorder struct {
	mock *MocksvcManifestReader
}

// NewMocksvcManifestReader creates a new mock instance
func NewMocksvcManifestReader(ctrl *gomock.Controller) *MocksvcManifestReader {
	mock := &MocksvcManifestReader{ctrl: ctrl}
	mock.recorder = &MocksvcManifestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksvcManifestReader) EXPECT() *MocksvcManifestReaderMockRecorder {
	return m.recorder
}

// ReadServiceManifest mocks base method
func (m *MocksvcManifestReader) ReadServiceManifest(svcName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceManifest", svcName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceManifest indicates an expected call of ReadServiceManifest
func (mr *MocksvcManifestReaderMockRecorder) ReadServiceManifest(svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceManifest", reflect.TypeOf((*MocksvcManifestReader)(nil).ReadServiceManifest), svcName)
}

// MockjobManifestReader is a mock of jobManifestReader interface
type MockjobManifestReader struct {
	ctrl     *gomock.Controller
	recorder *MockjobManifestReaderMockRecorder
}

// MockjobManifestReaderMockRecorder is the mock recorder for MockjobManifestReader
type MockjobManifestReaderMockRecorder struct {
	mock *MockjobManifestReader
}

// NewMockjobManifestReader creates a new mock instance
func NewMockjobManifestReader(ctrl *gomock.Controller) *MockjobManifestReader {
	mock := &MockjobManifestReader{ctrl: ctrl}
	mock.recorder = &MockjobManifestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockjobManifestReader) EXPECT() *MockjobManifestReaderMockRecorder {
	return m.recorder
}

// ReadJobManifest mocks base method
func (m *MockjobManifestReader) ReadJobManifest(jobName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJobManifest", jobName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJobManifest indicates an expected call of ReadJobManifest
func (mr *MockjobManifestReaderMockRecorder) ReadJobManifest(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJobManifest", reflect.TypeOf((*MockjobManifestReader)(nil).ReadJobManifest), jobName)
}

// MockcopilotDirGetter is a mock of copilotDirGetter interface
type MockcopilotDirGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcopilotDirGetterMockRecorder
}

// MockcopilotDirGetterMockRecorder is the mock recorder for MockcopilotDirGetter
type MockcopilotDirGetterMockRecorder struct {
	mock *MockcopilotDirGetter
}

// NewMockcopilotDirGetter creates a new mock instance
func NewMockcopilotDirGetter(ctrl *gomock.Controller) *MockcopilotDirGetter {
	mock := &MockcopilotDirGetter{ctrl: ctrl}
	mock.recorder = &MockcopilotDirGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcopilotDirGetter) EXPECT() *MockcopilotDirGetterMockRecorder {
	return m.recorder
}

// CopilotDirPath mocks base method
func (m *MockcopilotDirGetter) CopilotDirPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopilotDirPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopilotDirPath indicates an expected call of CopilotDirPath
func (mr *MockcopilotDirGetterMockRecorder) CopilotDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopilotDirPath", reflect.TypeOf((*MockcopilotDirGetter)(nil).CopilotDirPath))
}

// MockwsPipelineManifestReader is a mock of wsPipelineManifestReader interface
type MockwsPipelineManifestReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsPipelineManifestReaderMockRecorder
}

// MockwsPipelineManifestReaderMockRecorder is the mock recorder for MockwsPipelineManifestReader
type MockwsPipelineManifestReaderMockRecorder struct {
	mock *MockwsPipelineManifestReader
}

// NewMockwsPipelineManifestReader creates a new mock instance
func NewMockwsPipelineManifestReader(ctrl *gomock.Controller) *MockwsPipelineManifestReader {
	mock := &MockwsPipelineManifestReader{ctrl: ctrl}
	mock.recorder = &MockwsPipelineManifestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsPipelineManifestReader) EXPECT() *MockwsPipelineManifestReaderMockRecorder {
	return m.recorder
}

// ReadPipelineManifest mocks base method
func (m *MockwsPipelineManifestReader) ReadPipelineManifest() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPipelineManifest")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPipelineManifest indicates an expected call of ReadPipelineManifest
func (mr *MockwsPipelineManifestReaderMockRecorder) ReadPipelineManifest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPipelineManifest", reflect.TypeOf((*MockwsPipelineManifestReader)(nil).ReadPipelineManifest))
}

// MockwsPipelineWriter is a mock of wsPipelineWriter interface
type MockwsPipelineWriter struct {
	ctrl     *gomock.Controller
	recorder *MockwsPipelineWriterMockRecorder
}

// MockwsPipelineWriterMockRecorder is the mock recorder for MockwsPipelineWriter
type MockwsPipelineWriterMockRecorder struct {
	mock *MockwsPipelineWriter
}

// NewMockwsPipelineWriter creates a new mock instance
func NewMockwsPipelineWriter(ctrl *gomock.Controller) *MockwsPipelineWriter {
	mock := &MockwsPipelineWriter{ctrl: ctrl}
	mock.recorder = &MockwsPipelineWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsPipelineWriter) EXPECT() *MockwsPipelineWriterMockRecorder {
	return m.recorder
}

// WritePipelineBuildspec mocks base method
func (m *MockwsPipelineWriter) WritePipelineBuildspec(marshaler encoding.BinaryMarshaler) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePipelineBuildspec", marshaler)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WritePipelineBuildspec indicates an expected call of WritePipelineBuildspec
func (mr *MockwsPipelineWriterMockRecorder) WritePipelineBuildspec(marshaler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePipelineBuildspec", reflect.TypeOf((*MockwsPipelineWriter)(nil).WritePipelineBuildspec), marshaler)
}

// WritePipelineManifest mocks base method
func (m *MockwsPipelineWriter) WritePipelineManifest(marshaler encoding.BinaryMarshaler) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePipelineManifest", marshaler)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WritePipelineManifest indicates an expected call of WritePipelineManifest
func (mr *MockwsPipelineWriterMockRecorder) WritePipelineManifest(marshaler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePipelineManifest", reflect.TypeOf((*MockwsPipelineWriter)(nil).WritePipelineManifest), marshaler)
}

// MockwsServiceLister is a mock of wsServiceLister interface
type MockwsServiceLister struct {
	ctrl     *gomock.Controller
	recorder *MockwsServiceListerMockRecorder
}

// MockwsServiceListerMockRecorder is the mock recorder for MockwsServiceLister
type MockwsServiceListerMockRecorder struct {
	mock *MockwsServiceLister
}

// NewMockwsServiceLister creates a new mock instance
func NewMockwsServiceLister(ctrl *gomock.Controller) *MockwsServiceLister {
	mock := &MockwsServiceLister{ctrl: ctrl}
	mock.recorder = &MockwsServiceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsServiceLister) EXPECT() *MockwsServiceListerMockRecorder {
	return m.recorder
}

// ServiceNames mocks base method
func (m *MockwsServiceLister) ServiceNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNames indicates an expected call of ServiceNames
func (mr *MockwsServiceListerMockRecorder) ServiceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNames", reflect.TypeOf((*MockwsServiceLister)(nil).ServiceNames))
}

// MockwsSvcReader is a mock of wsSvcReader interface
type MockwsSvcReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsSvcReaderMockRecorder
}

// MockwsSvcReaderMockRecorder is the mock recorder for MockwsSvcReader
type MockwsSvcReaderMockRecorder struct {
	mock *MockwsSvcReader
}

// NewMockwsSvcReader creates a new mock instance
func NewMockwsSvcReader(ctrl *gomock.Controller) *MockwsSvcReader {
	mock := &MockwsSvcReader{ctrl: ctrl}
	mock.recorder = &MockwsSvcReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsSvcReader) EXPECT() *MockwsSvcReaderMockRecorder {
	return m.recorder
}

// ServiceNames mocks base method
func (m *MockwsSvcReader) ServiceNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNames indicates an expected call of ServiceNames
func (mr *MockwsSvcReaderMockRecorder) ServiceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNames", reflect.TypeOf((*MockwsSvcReader)(nil).ServiceNames))
}

// ReadServiceManifest mocks base method
func (m *MockwsSvcReader) ReadServiceManifest(svcName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceManifest", svcName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceManifest indicates an expected call of ReadServiceManifest
func (mr *MockwsSvcReaderMockRecorder) ReadServiceManifest(svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceManifest", reflect.TypeOf((*MockwsSvcReader)(nil).ReadServiceManifest), svcName)
}

// MockwsSvcDirReader is a mock of wsSvcDirReader interface
type MockwsSvcDirReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsSvcDirReaderMockRecorder
}

// MockwsSvcDirReaderMockRecorder is the mock recorder for MockwsSvcDirReader
type MockwsSvcDirReaderMockRecorder struct {
	mock *MockwsSvcDirReader
}

// NewMockwsSvcDirReader creates a new mock instance
func NewMockwsSvcDirReader(ctrl *gomock.Controller) *MockwsSvcDirReader {
	mock := &MockwsSvcDirReader{ctrl: ctrl}
	mock.recorder = &MockwsSvcDirReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsSvcDirReader) EXPECT() *MockwsSvcDirReaderMockRecorder {
	return m.recorder
}

// ServiceNames mocks base method
func (m *MockwsSvcDirReader) ServiceNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNames indicates an expected call of ServiceNames
func (mr *MockwsSvcDirReaderMockRecorder) ServiceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNames", reflect.TypeOf((*MockwsSvcDirReader)(nil).ServiceNames))
}

// ReadServiceManifest mocks base method
func (m *MockwsSvcDirReader) ReadServiceManifest(svcName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceManifest", svcName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceManifest indicates an expected call of ReadServiceManifest
func (mr *MockwsSvcDirReaderMockRecorder) ReadServiceManifest(svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceManifest", reflect.TypeOf((*MockwsSvcDirReader)(nil).ReadServiceManifest), svcName)
}

// CopilotDirPath mocks base method
func (m *MockwsSvcDirReader) CopilotDirPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopilotDirPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopilotDirPath indicates an expected call of CopilotDirPath
func (mr *MockwsSvcDirReaderMockRecorder) CopilotDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopilotDirPath", reflect.TypeOf((*MockwsSvcDirReader)(nil).CopilotDirPath))
}

// MockwsJobLister is a mock of wsJobLister interface
type MockwsJobLister struct {
	ctrl     *gomock.Controller
	recorder *MockwsJobListerMockRecorder
}

// MockwsJobListerMockRecorder is the mock recorder for MockwsJobLister
type MockwsJobListerMockRecorder struct {
	mock *MockwsJobLister
}

// NewMockwsJobLister creates a new mock instance
func NewMockwsJobLister(ctrl *gomock.Controller) *MockwsJobLister {
	mock := &MockwsJobLister{ctrl: ctrl}
	mock.recorder = &MockwsJobListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsJobLister) EXPECT() *MockwsJobListerMockRecorder {
	return m.recorder
}

// JobNames mocks base method
func (m *MockwsJobLister) JobNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobNames indicates an expected call of JobNames
func (mr *MockwsJobListerMockRecorder) JobNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobNames", reflect.TypeOf((*MockwsJobLister)(nil).JobNames))
}

// MockwsJobReader is a mock of wsJobReader interface
type MockwsJobReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsJobReaderMockRecorder
}

// MockwsJobReaderMockRecorder is the mock recorder for MockwsJobReader
type MockwsJobReaderMockRecorder struct {
	mock *MockwsJobReader
}

// NewMockwsJobReader creates a new mock instance
func NewMockwsJobReader(ctrl *gomock.Controller) *MockwsJobReader {
	mock := &MockwsJobReader{ctrl: ctrl}
	mock.recorder = &MockwsJobReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsJobReader) EXPECT() *MockwsJobReaderMockRecorder {
	return m.recorder
}

// ReadJobManifest mocks base method
func (m *MockwsJobReader) ReadJobManifest(jobName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJobManifest", jobName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJobManifest indicates an expected call of ReadJobManifest
func (mr *MockwsJobReaderMockRecorder) ReadJobManifest(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJobManifest", reflect.TypeOf((*MockwsJobReader)(nil).ReadJobManifest), jobName)
}

// JobNames mocks base method
func (m *MockwsJobReader) JobNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobNames indicates an expected call of JobNames
func (mr *MockwsJobReaderMockRecorder) JobNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobNames", reflect.TypeOf((*MockwsJobReader)(nil).JobNames))
}

// MockwsWlReader is a mock of wsWlReader interface
type MockwsWlReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsWlReaderMockRecorder
}

// MockwsWlReaderMockRecorder is the mock recorder for MockwsWlReader
type MockwsWlReaderMockRecorder struct {
	mock *MockwsWlReader
}

// NewMockwsWlReader creates a new mock instance
func NewMockwsWlReader(ctrl *gomock.Controller) *MockwsWlReader {
	mock := &MockwsWlReader{ctrl: ctrl}
	mock.recorder = &MockwsWlReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsWlReader) EXPECT() *MockwsWlReaderMockRecorder {
	return m.recorder
}

// WorkloadNames mocks base method
func (m *MockwsWlReader) WorkloadNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadNames indicates an expected call of WorkloadNames
func (mr *MockwsWlReaderMockRecorder) WorkloadNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadNames", reflect.TypeOf((*MockwsWlReader)(nil).WorkloadNames))
}

// MockwsJobDirReader is a mock of wsJobDirReader interface
type MockwsJobDirReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsJobDirReaderMockRecorder
}

// MockwsJobDirReaderMockRecorder is the mock recorder for MockwsJobDirReader
type MockwsJobDirReaderMockRecorder struct {
	mock *MockwsJobDirReader
}

// NewMockwsJobDirReader creates a new mock instance
func NewMockwsJobDirReader(ctrl *gomock.Controller) *MockwsJobDirReader {
	mock := &MockwsJobDirReader{ctrl: ctrl}
	mock.recorder = &MockwsJobDirReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsJobDirReader) EXPECT() *MockwsJobDirReaderMockRecorder {
	return m.recorder
}

// ReadJobManifest mocks base method
func (m *MockwsJobDirReader) ReadJobManifest(jobName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJobManifest", jobName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJobManifest indicates an expected call of ReadJobManifest
func (mr *MockwsJobDirReaderMockRecorder) ReadJobManifest(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJobManifest", reflect.TypeOf((*MockwsJobDirReader)(nil).ReadJobManifest), jobName)
}

// JobNames mocks base method
func (m *MockwsJobDirReader) JobNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobNames indicates an expected call of JobNames
func (mr *MockwsJobDirReaderMockRecorder) JobNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobNames", reflect.TypeOf((*MockwsJobDirReader)(nil).JobNames))
}

// CopilotDirPath mocks base method
func (m *MockwsJobDirReader) CopilotDirPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopilotDirPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopilotDirPath indicates an expected call of CopilotDirPath
func (mr *MockwsJobDirReaderMockRecorder) CopilotDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopilotDirPath", reflect.TypeOf((*MockwsJobDirReader)(nil).CopilotDirPath))
}

// MockwsWlDirReader is a mock of wsWlDirReader interface
type MockwsWlDirReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsWlDirReaderMockRecorder
}

// MockwsWlDirReaderMockRecorder is the mock recorder for MockwsWlDirReader
type MockwsWlDirReaderMockRecorder struct {
	mock *MockwsWlDirReader
}

// NewMockwsWlDirReader creates a new mock instance
func NewMockwsWlDirReader(ctrl *gomock.Controller) *MockwsWlDirReader {
	mock := &MockwsWlDirReader{ctrl: ctrl}
	mock.recorder = &MockwsWlDirReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsWlDirReader) EXPECT() *MockwsWlDirReaderMockRecorder {
	return m.recorder
}

// ReadJobManifest mocks base method
func (m *MockwsWlDirReader) ReadJobManifest(jobName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJobManifest", jobName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJobManifest indicates an expected call of ReadJobManifest
func (mr *MockwsWlDirReaderMockRecorder) ReadJobManifest(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJobManifest", reflect.TypeOf((*MockwsWlDirReader)(nil).ReadJobManifest), jobName)
}

// JobNames mocks base method
func (m *MockwsWlDirReader) JobNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobNames indicates an expected call of JobNames
func (mr *MockwsWlDirReaderMockRecorder) JobNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobNames", reflect.TypeOf((*MockwsWlDirReader)(nil).JobNames))
}

// ServiceNames mocks base method
func (m *MockwsWlDirReader) ServiceNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNames indicates an expected call of ServiceNames
func (mr *MockwsWlDirReaderMockRecorder) ServiceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNames", reflect.TypeOf((*MockwsWlDirReader)(nil).ServiceNames))
}

// ReadServiceManifest mocks base method
func (m *MockwsWlDirReader) ReadServiceManifest(svcName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceManifest", svcName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceManifest indicates an expected call of ReadServiceManifest
func (mr *MockwsWlDirReaderMockRecorder) ReadServiceManifest(svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceManifest", reflect.TypeOf((*MockwsWlDirReader)(nil).ReadServiceManifest), svcName)
}

// CopilotDirPath mocks base method
func (m *MockwsWlDirReader) CopilotDirPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopilotDirPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopilotDirPath indicates an expected call of CopilotDirPath
func (mr *MockwsWlDirReaderMockRecorder) CopilotDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopilotDirPath", reflect.TypeOf((*MockwsWlDirReader)(nil).CopilotDirPath))
}

// WorkloadNames mocks base method
func (m *MockwsWlDirReader) WorkloadNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadNames indicates an expected call of WorkloadNames
func (mr *MockwsWlDirReaderMockRecorder) WorkloadNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadNames", reflect.TypeOf((*MockwsWlDirReader)(nil).WorkloadNames))
}

// ListDockerfiles mocks base method
func (m *MockwsWlDirReader) ListDockerfiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDockerfiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDockerfiles indicates an expected call of ListDockerfiles
func (mr *MockwsWlDirReaderMockRecorder) ListDockerfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDockerfiles", reflect.TypeOf((*MockwsWlDirReader)(nil).ListDockerfiles))
}

// Summary mocks base method
func (m *MockwsWlDirReader) Summary() (*workspace.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary")
	ret0, _ := ret[0].(*workspace.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summary indicates an expected call of Summary
func (mr *MockwsWlDirReaderMockRecorder) Summary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockwsWlDirReader)(nil).Summary))
}

// MockwsPipelineReader is a mock of wsPipelineReader interface
type MockwsPipelineReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsPipelineReaderMockRecorder
}

// MockwsPipelineReaderMockRecorder is the mock recorder for MockwsPipelineReader
type MockwsPipelineReaderMockRecorder struct {
	mock *MockwsPipelineReader
}

// NewMockwsPipelineReader creates a new mock instance
func NewMockwsPipelineReader(ctrl *gomock.Controller) *MockwsPipelineReader {
	mock := &MockwsPipelineReader{ctrl: ctrl}
	mock.recorder = &MockwsPipelineReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsPipelineReader) EXPECT() *MockwsPipelineReaderMockRecorder {
	return m.recorder
}

// ReadPipelineManifest mocks base method
func (m *MockwsPipelineReader) ReadPipelineManifest() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPipelineManifest")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPipelineManifest indicates an expected call of ReadPipelineManifest
func (mr *MockwsPipelineReaderMockRecorder) ReadPipelineManifest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPipelineManifest", reflect.TypeOf((*MockwsPipelineReader)(nil).ReadPipelineManifest))
}

// WorkloadNames mocks base method
func (m *MockwsPipelineReader) WorkloadNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadNames indicates an expected call of WorkloadNames
func (mr *MockwsPipelineReaderMockRecorder) WorkloadNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadNames", reflect.TypeOf((*MockwsPipelineReader)(nil).WorkloadNames))
}

// MockwsAppManager is a mock of wsAppManager interface
type MockwsAppManager struct {
	ctrl     *gomock.Controller
	recorder *MockwsAppManagerMockRecorder
}

// MockwsAppManagerMockRecorder is the mock recorder for MockwsAppManager
type MockwsAppManagerMockRecorder struct {
	mock *MockwsAppManager
}

// NewMockwsAppManager creates a new mock instance
func NewMockwsAppManager(ctrl *gomock.Controller) *MockwsAppManager {
	mock := &MockwsAppManager{ctrl: ctrl}
	mock.recorder = &MockwsAppManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsAppManager) EXPECT() *MockwsAppManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockwsAppManager) Create(appName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockwsAppManagerMockRecorder) Create(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockwsAppManager)(nil).Create), appName)
}

// Summary mocks base method
func (m *MockwsAppManager) Summary() (*workspace.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary")
	ret0, _ := ret[0].(*workspace.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summary indicates an expected call of Summary
func (mr *MockwsAppManagerMockRecorder) Summary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockwsAppManager)(nil).Summary))
}

// MockwsAddonManager is a mock of wsAddonManager interface
type MockwsAddonManager struct {
	ctrl     *gomock.Controller
	recorder *MockwsAddonManagerMockRecorder
}

// MockwsAddonManagerMockRecorder is the mock recorder for MockwsAddonManager
type MockwsAddonManagerMockRecorder struct {
	mock *MockwsAddonManager
}

// NewMockwsAddonManager creates a new mock instance
func NewMockwsAddonManager(ctrl *gomock.Controller) *MockwsAddonManager {
	mock := &MockwsAddonManager{ctrl: ctrl}
	mock.recorder = &MockwsAddonManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsAddonManager) EXPECT() *MockwsAddonManagerMockRecorder {
	return m.recorder
}

// WriteAddon mocks base method
func (m *MockwsAddonManager) WriteAddon(f encoding.BinaryMarshaler, svc, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAddon", f, svc, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAddon indicates an expected call of WriteAddon
func (mr *MockwsAddonManagerMockRecorder) WriteAddon(f, svc, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAddon", reflect.TypeOf((*MockwsAddonManager)(nil).WriteAddon), f, svc, name)
}

// WorkloadNames mocks base method
func (m *MockwsAddonManager) WorkloadNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadNames indicates an expected call of WorkloadNames
func (mr *MockwsAddonManagerMockRecorder) WorkloadNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadNames", reflect.TypeOf((*MockwsAddonManager)(nil).WorkloadNames))
}

// MockartifactUploader is a mock of artifactUploader interface
type MockartifactUploader struct {
	ctrl     *gomock.Controller
	recorder *MockartifactUploaderMockRecorder
}

// MockartifactUploaderMockRecorder is the mock recorder for MockartifactUploader
type MockartifactUploaderMockRecorder struct {
	mock *MockartifactUploader
}

// NewMockartifactUploader creates a new mock instance
func NewMockartifactUploader(ctrl *gomock.Controller) *MockartifactUploader {
	mock := &MockartifactUploader{ctrl: ctrl}
	mock.recorder = &MockartifactUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockartifactUploader) EXPECT() *MockartifactUploaderMockRecorder {
	return m.recorder
}

// PutArtifact mocks base method
func (m *MockartifactUploader) PutArtifact(bucket, fileName string, data io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutArtifact", bucket, fileName, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutArtifact indicates an expected call of PutArtifact
func (mr *MockartifactUploaderMockRecorder) PutArtifact(bucket, fileName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutArtifact", reflect.TypeOf((*MockartifactUploader)(nil).PutArtifact), bucket, fileName, data)
}

// MockbucketEmptier is a mock of bucketEmptier interface
type MockbucketEmptier struct {
	ctrl     *gomock.Controller
	recorder *MockbucketEmptierMockRecorder
}

// MockbucketEmptierMockRecorder is the mock recorder for MockbucketEmptier
type MockbucketEmptierMockRecorder struct {
	mock *MockbucketEmptier
}

// NewMockbucketEmptier creates a new mock instance
func NewMockbucketEmptier(ctrl *gomock.Controller) *MockbucketEmptier {
	mock := &MockbucketEmptier{ctrl: ctrl}
	mock.recorder = &MockbucketEmptierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockbucketEmptier) EXPECT() *MockbucketEmptierMockRecorder {
	return m.recorder
}

// EmptyBucket mocks base method
func (m *MockbucketEmptier) EmptyBucket(bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyBucket", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmptyBucket indicates an expected call of EmptyBucket
func (mr *MockbucketEmptierMockRecorder) EmptyBucket(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyBucket", reflect.TypeOf((*MockbucketEmptier)(nil).EmptyBucket), bucket)
}

// MockenvironmentDeployer is a mock of environmentDeployer interface
type MockenvironmentDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentDeployerMockRecorder
}

// MockenvironmentDeployerMockRecorder is the mock recorder for MockenvironmentDeployer
type MockenvironmentDeployerMockRecorder struct {
	mock *MockenvironmentDeployer
}

// NewMockenvironmentDeployer creates a new mock instance
func NewMockenvironmentDeployer(ctrl *gomock.Controller) *MockenvironmentDeployer {
	mock := &MockenvironmentDeployer{ctrl: ctrl}
	mock.recorder = &MockenvironmentDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvironmentDeployer) EXPECT() *MockenvironmentDeployerMockRecorder {
	return m.recorder
}

// DeployEnvironment mocks base method
func (m *MockenvironmentDeployer) DeployEnvironment(env *deploy.CreateEnvironmentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployEnvironment indicates an expected call of DeployEnvironment
func (mr *MockenvironmentDeployerMockRecorder) DeployEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployEnvironment", reflect.TypeOf((*MockenvironmentDeployer)(nil).DeployEnvironment), env)
}

// StreamEnvironmentCreation mocks base method
func (m *MockenvironmentDeployer) StreamEnvironmentCreation(env *deploy.CreateEnvironmentInput) (<-chan []deploy.ResourceEvent, <-chan deploy.CreateEnvironmentResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamEnvironmentCreation", env)
	ret0, _ := ret[0].(<-chan []deploy.ResourceEvent)
	ret1, _ := ret[1].(<-chan deploy.CreateEnvironmentResponse)
	return ret0, ret1
}

// StreamEnvironmentCreation indicates an expected call of StreamEnvironmentCreation
func (mr *MockenvironmentDeployerMockRecorder) StreamEnvironmentCreation(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEnvironmentCreation", reflect.TypeOf((*MockenvironmentDeployer)(nil).StreamEnvironmentCreation), env)
}

// DeleteEnvironment mocks base method
func (m *MockenvironmentDeployer) DeleteEnvironment(appName, envName, cfnExecRoleARN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", appName, envName, cfnExecRoleARN)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockenvironmentDeployerMockRecorder) DeleteEnvironment(appName, envName, cfnExecRoleARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockenvironmentDeployer)(nil).DeleteEnvironment), appName, envName, cfnExecRoleARN)
}

// GetEnvironment mocks base method
func (m *MockenvironmentDeployer) GetEnvironment(appName, envName string) (*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", appName, envName)
	ret0, _ := ret[0].(*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockenvironmentDeployerMockRecorder) GetEnvironment(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockenvironmentDeployer)(nil).GetEnvironment), appName, envName)
}

// EnvironmentTemplate mocks base method
func (m *MockenvironmentDeployer) EnvironmentTemplate(appName, envName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentTemplate", appName, envName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentTemplate indicates an expected call of EnvironmentTemplate
func (mr *MockenvironmentDeployerMockRecorder) EnvironmentTemplate(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentTemplate", reflect.TypeOf((*MockenvironmentDeployer)(nil).EnvironmentTemplate), appName, envName)
}

// UpdateEnvironmentTemplate mocks base method
func (m *MockenvironmentDeployer) UpdateEnvironmentTemplate(appName, envName, templateBody, cfnExecRoleARN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplate", appName, envName, templateBody, cfnExecRoleARN)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironmentTemplate indicates an expected call of UpdateEnvironmentTemplate
func (mr *MockenvironmentDeployerMockRecorder) UpdateEnvironmentTemplate(appName, envName, templateBody, cfnExecRoleARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplate", reflect.TypeOf((*MockenvironmentDeployer)(nil).UpdateEnvironmentTemplate), appName, envName, templateBody, cfnExecRoleARN)
}

// MockwlDeleter is a mock of wlDeleter interface
type MockwlDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockwlDeleterMockRecorder
}

// MockwlDeleterMockRecorder is the mock recorder for MockwlDeleter
type MockwlDeleterMockRecorder struct {
	mock *MockwlDeleter
}

// NewMockwlDeleter creates a new mock instance
func NewMockwlDeleter(ctrl *gomock.Controller) *MockwlDeleter {
	mock := &MockwlDeleter{ctrl: ctrl}
	mock.recorder = &MockwlDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwlDeleter) EXPECT() *MockwlDeleterMockRecorder {
	return m.recorder
}

// DeleteWorkload mocks base method
func (m *MockwlDeleter) DeleteWorkload(in deploy.DeleteWorkloadInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkload", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkload indicates an expected call of DeleteWorkload
func (mr *MockwlDeleterMockRecorder) DeleteWorkload(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkload", reflect.TypeOf((*MockwlDeleter)(nil).DeleteWorkload), in)
}

// MocksvcRemoverFromApp is a mock of svcRemoverFromApp interface
type MocksvcRemoverFromApp struct {
	ctrl     *gomock.Controller
	recorder *MocksvcRemoverFromAppMockRecorder
}

// MocksvcRemoverFromAppMockRecorder is the mock recorder for MocksvcRemoverFromApp
type MocksvcRemoverFromAppMockRecorder struct {
	mock *MocksvcRemoverFromApp
}

// NewMocksvcRemoverFromApp creates a new mock instance
func NewMocksvcRemoverFromApp(ctrl *gomock.Controller) *MocksvcRemoverFromApp {
	mock := &MocksvcRemoverFromApp{ctrl: ctrl}
	mock.recorder = &MocksvcRemoverFromAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksvcRemoverFromApp) EXPECT() *MocksvcRemoverFromAppMockRecorder {
	return m.recorder
}

// RemoveServiceFromApp mocks base method
func (m *MocksvcRemoverFromApp) RemoveServiceFromApp(app *config.Application, svcName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceFromApp", app, svcName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServiceFromApp indicates an expected call of RemoveServiceFromApp
func (mr *MocksvcRemoverFromAppMockRecorder) RemoveServiceFromApp(app, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceFromApp", reflect.TypeOf((*MocksvcRemoverFromApp)(nil).RemoveServiceFromApp), app, svcName)
}

// MockjobRemoverFromApp is a mock of jobRemoverFromApp interface
type MockjobRemoverFromApp struct {
	ctrl     *gomock.Controller
	recorder *MockjobRemoverFromAppMockRecorder
}

// MockjobRemoverFromAppMockRecorder is the mock recorder for MockjobRemoverFromApp
type MockjobRemoverFromAppMockRecorder struct {
	mock *MockjobRemoverFromApp
}

// NewMockjobRemoverFromApp creates a new mock instance
func NewMockjobRemoverFromApp(ctrl *gomock.Controller) *MockjobRemoverFromApp {
	mock := &MockjobRemoverFromApp{ctrl: ctrl}
	mock.recorder = &MockjobRemoverFromAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockjobRemoverFromApp) EXPECT() *MockjobRemoverFromAppMockRecorder {
	return m.recorder
}

// RemoveJobFromApp mocks base method
func (m *MockjobRemoverFromApp) RemoveJobFromApp(app *config.Application, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveJobFromApp", app, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveJobFromApp indicates an expected call of RemoveJobFromApp
func (mr *MockjobRemoverFromAppMockRecorder) RemoveJobFromApp(app, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveJobFromApp", reflect.TypeOf((*MockjobRemoverFromApp)(nil).RemoveJobFromApp), app, jobName)
}

// MockimageRemover is a mock of imageRemover interface
type MockimageRemover struct {
	ctrl     *gomock.Controller
	recorder *MockimageRemoverMockRecorder
}

// MockimageRemoverMockRecorder is the mock recorder for MockimageRemover
type MockimageRemoverMockRecorder struct {
	mock *MockimageRemover
}

// NewMockimageRemover creates a new mock instance
func NewMockimageRemover(ctrl *gomock.Controller) *MockimageRemover {
	mock := &MockimageRemover{ctrl: ctrl}
	mock.recorder = &MockimageRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockimageRemover) EXPECT() *MockimageRemoverMockRecorder {
	return m.recorder
}

// ClearRepository mocks base method
func (m *MockimageRemover) ClearRepository(repoName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRepository", repoName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearRepository indicates an expected call of ClearRepository
func (mr *MockimageRemoverMockRecorder) ClearRepository(repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRepository", reflect.TypeOf((*MockimageRemover)(nil).ClearRepository), repoName)
}

// MockpipelineDeployer is a mock of pipelineDeployer interface
type MockpipelineDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockpipelineDeployerMockRecorder
}

// MockpipelineDeployerMockRecorder is the mock recorder for MockpipelineDeployer
type MockpipelineDeployerMockRecorder struct {
	mock *MockpipelineDeployer
}

// NewMockpipelineDeployer creates a new mock instance
func NewMockpipelineDeployer(ctrl *gomock.Controller) *MockpipelineDeployer {
	mock := &MockpipelineDeployer{ctrl: ctrl}
	mock.recorder = &MockpipelineDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpipelineDeployer) EXPECT() *MockpipelineDeployerMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method
func (m *MockpipelineDeployer) CreatePipeline(env *deploy.CreatePipelineInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline
func (mr *MockpipelineDeployerMockRecorder) CreatePipeline(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockpipelineDeployer)(nil).CreatePipeline), env)
}

// UpdatePipeline mocks base method
func (m *MockpipelineDeployer) UpdatePipeline(env *deploy.CreatePipelineInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePipeline indicates an expected call of UpdatePipeline
func (mr *MockpipelineDeployerMockRecorder) UpdatePipeline(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockpipelineDeployer)(nil).UpdatePipeline), env)
}

// PipelineExists mocks base method
func (m *MockpipelineDeployer) PipelineExists(env *deploy.CreatePipelineInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineExists", env)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineExists indicates an expected call of PipelineExists
func (mr *MockpipelineDeployerMockRecorder) PipelineExists(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineExists", reflect.TypeOf((*MockpipelineDeployer)(nil).PipelineExists), env)
}

// DeletePipeline mocks base method
func (m *MockpipelineDeployer) DeletePipeline(pipelineName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", pipelineName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockpipelineDeployerMockRecorder) DeletePipeline(pipelineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockpipelineDeployer)(nil).DeletePipeline), pipelineName)
}

// AddPipelineResourcesToApp mocks base method
func (m *MockpipelineDeployer) AddPipelineResourcesToApp(app *config.Application, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPipelineResourcesToApp", app, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPipelineResourcesToApp indicates an expected call of AddPipelineResourcesToApp
func (mr *MockpipelineDeployerMockRecorder) AddPipelineResourcesToApp(app, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPipelineResourcesToApp", reflect.TypeOf((*MockpipelineDeployer)(nil).AddPipelineResourcesToApp), app, region)
}

// GetAppResourcesByRegion mocks base method
func (m *MockpipelineDeployer) GetAppResourcesByRegion(app *config.Application, region string) (*stack.AppRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppResourcesByRegion", app, region)
	ret0, _ := ret[0].(*stack.AppRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppResourcesByRegion indicates an expected call of GetAppResourcesByRegion
func (mr *MockpipelineDeployerMockRecorder) GetAppResourcesByRegion(app, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppResourcesByRegion", reflect.TypeOf((*MockpipelineDeployer)(nil).GetAppResourcesByRegion), app, region)
}

// GetRegionalAppResources mocks base method
func (m *MockpipelineDeployer) GetRegionalAppResources(app *config.Application) ([]*stack.AppRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionalAppResources", app)
	ret0, _ := ret[0].([]*stack.AppRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionalAppResources indicates an expected call of GetRegionalAppResources
func (mr *MockpipelineDeployerMockRecorder) GetRegionalAppResources(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionalAppResources", reflect.TypeOf((*MockpipelineDeployer)(nil).GetRegionalAppResources), app)
}

// MockappDeployer is a mock of appDeployer interface
type MockappDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockappDeployerMockRecorder
}

// MockappDeployerMockRecorder is the mock recorder for MockappDeployer
type MockappDeployerMockRecorder struct {
	mock *MockappDeployer
}

// NewMockappDeployer creates a new mock instance
func NewMockappDeployer(ctrl *gomock.Controller) *MockappDeployer {
	mock := &MockappDeployer{ctrl: ctrl}
	mock.recorder = &MockappDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappDeployer) EXPECT() *MockappDeployerMockRecorder {
	return m.recorder
}

// DeployApp mocks base method
func (m *MockappDeployer) DeployApp(in *deploy.CreateAppInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployApp", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployApp indicates an expected call of DeployApp
func (mr *MockappDeployerMockRecorder) DeployApp(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployApp", reflect.TypeOf((*MockappDeployer)(nil).DeployApp), in)
}

// AddServiceToApp mocks base method
func (m *MockappDeployer) AddServiceToApp(app *config.Application, svcName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceToApp", app, svcName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddServiceToApp indicates an expected call of AddServiceToApp
func (mr *MockappDeployerMockRecorder) AddServiceToApp(app, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceToApp", reflect.TypeOf((*MockappDeployer)(nil).AddServiceToApp), app, svcName)
}

// AddJobToApp mocks base method
func (m *MockappDeployer) AddJobToApp(app *config.Application, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJobToApp", app, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJobToApp indicates an expected call of AddJobToApp
func (mr *MockappDeployerMockRecorder) AddJobToApp(app, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJobToApp", reflect.TypeOf((*MockappDeployer)(nil).AddJobToApp), app, jobName)
}

// AddEnvToApp mocks base method
func (m *MockappDeployer) AddEnvToApp(app *config.Application, env *config.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEnvToApp", app, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEnvToApp indicates an expected call of AddEnvToApp
func (mr *MockappDeployerMockRecorder) AddEnvToApp(app, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnvToApp", reflect.TypeOf((*MockappDeployer)(nil).AddEnvToApp), app, env)
}

// DelegateDNSPermissions mocks base method
func (m *MockappDeployer) DelegateDNSPermissions(app *config.Application, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateDNSPermissions", app, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelegateDNSPermissions indicates an expected call of DelegateDNSPermissions
func (mr *MockappDeployerMockRecorder) DelegateDNSPermissions(app, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateDNSPermissions", reflect.TypeOf((*MockappDeployer)(nil).DelegateDNSPermissions), app, accountID)
}

// DeleteApp mocks base method
func (m *MockappDeployer) DeleteApp(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockappDeployerMockRecorder) DeleteApp(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockappDeployer)(nil).DeleteApp), name)
}

// MockappResourcesGetter is a mock of appResourcesGetter interface
type MockappResourcesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockappResourcesGetterMockRecorder
}

// MockappResourcesGetterMockRecorder is the mock recorder for MockappResourcesGetter
type MockappResourcesGetterMockRecorder struct {
	mock *MockappResourcesGetter
}

// NewMockappResourcesGetter creates a new mock instance
func NewMockappResourcesGetter(ctrl *gomock.Controller) *MockappResourcesGetter {
	mock := &MockappResourcesGetter{ctrl: ctrl}
	mock.recorder = &MockappResourcesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappResourcesGetter) EXPECT() *MockappResourcesGetterMockRecorder {
	return m.recorder
}

// GetAppResourcesByRegion mocks base method
func (m *MockappResourcesGetter) GetAppResourcesByRegion(app *config.Application, region string) (*stack.AppRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppResourcesByRegion", app, region)
	ret0, _ := ret[0].(*stack.AppRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppResourcesByRegion indicates an expected call of GetAppResourcesByRegion
func (mr *MockappResourcesGetterMockRecorder) GetAppResourcesByRegion(app, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppResourcesByRegion", reflect.TypeOf((*MockappResourcesGetter)(nil).GetAppResourcesByRegion), app, region)
}

// GetRegionalAppResources mocks base method
func (m *MockappResourcesGetter) GetRegionalAppResources(app *config.Application) ([]*stack.AppRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionalAppResources", app)
	ret0, _ := ret[0].([]*stack.AppRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionalAppResources indicates an expected call of GetRegionalAppResources
func (mr *MockappResourcesGetterMockRecorder) GetRegionalAppResources(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionalAppResources", reflect.TypeOf((*MockappResourcesGetter)(nil).GetRegionalAppResources), app)
}

// MocktaskDeployer is a mock of taskDeployer interface
type MocktaskDeployer struct {
	ctrl     *gomock.Controller
	recorder *MocktaskDeployerMockRecorder
}

// MocktaskDeployerMockRecorder is the mock recorder for MocktaskDeployer
type MocktaskDeployerMockRecorder struct {
	mock *MocktaskDeployer
}

// NewMocktaskDeployer creates a new mock instance
func NewMocktaskDeployer(ctrl *gomock.Controller) *MocktaskDeployer {
	mock := &MocktaskDeployer{ctrl: ctrl}
	mock.recorder = &MocktaskDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktaskDeployer) EXPECT() *MocktaskDeployerMockRecorder {
	return m.recorder
}

// DeployTask mocks base method
func (m *MocktaskDeployer) DeployTask(input *deploy.CreateTaskResourcesInput, opts ...cloudformation.StackOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployTask indicates an expected call of DeployTask
func (mr *MocktaskDeployerMockRecorder) DeployTask(input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployTask", reflect.TypeOf((*MocktaskDeployer)(nil).DeployTask), varargs...)
}

// MocktaskRunner is a mock of taskRunner interface
type MocktaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MocktaskRunnerMockRecorder
}

// MocktaskRunnerMockRecorder is the mock recorder for MocktaskRunner
type MocktaskRunnerMockRecorder struct {
	mock *MocktaskRunner
}

// NewMocktaskRunner creates a new mock instance
func NewMocktaskRunner(ctrl *gomock.Controller) *MocktaskRunner {
	mock := &MocktaskRunner{ctrl: ctrl}
	mock.recorder = &MocktaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktaskRunner) EXPECT() *MocktaskRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MocktaskRunner) Run() ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MocktaskRunnerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MocktaskRunner)(nil).Run))
}

// MockdefaultClusterGetter is a mock of defaultClusterGetter interface
type MockdefaultClusterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdefaultClusterGetterMockRecorder
}

// MockdefaultClusterGetterMockRecorder is the mock recorder for MockdefaultClusterGetter
type MockdefaultClusterGetterMockRecorder struct {
	mock *MockdefaultClusterGetter
}

// NewMockdefaultClusterGetter creates a new mock instance
func NewMockdefaultClusterGetter(ctrl *gomock.Controller) *MockdefaultClusterGetter {
	mock := &MockdefaultClusterGetter{ctrl: ctrl}
	mock.recorder = &MockdefaultClusterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdefaultClusterGetter) EXPECT() *MockdefaultClusterGetterMockRecorder {
	return m.recorder
}

// HasDefaultCluster mocks base method
func (m *MockdefaultClusterGetter) HasDefaultCluster() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDefaultCluster")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasDefaultCluster indicates an expected call of HasDefaultCluster
func (mr *MockdefaultClusterGetterMockRecorder) HasDefaultCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDefaultCluster", reflect.TypeOf((*MockdefaultClusterGetter)(nil).HasDefaultCluster))
}

// Mockdeployer is a mock of deployer interface
type Mockdeployer struct {
	ctrl     *gomock.Controller
	recorder *MockdeployerMockRecorder
}

// MockdeployerMockRecorder is the mock recorder for Mockdeployer
type MockdeployerMockRecorder struct {
	mock *Mockdeployer
}

// NewMockdeployer creates a new mock instance
func NewMockdeployer(ctrl *gomock.Controller) *Mockdeployer {
	mock := &Mockdeployer{ctrl: ctrl}
	mock.recorder = &MockdeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockdeployer) EXPECT() *MockdeployerMockRecorder {
	return m.recorder
}

// DeployEnvironment mocks base method
func (m *Mockdeployer) DeployEnvironment(env *deploy.CreateEnvironmentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployEnvironment indicates an expected call of DeployEnvironment
func (mr *MockdeployerMockRecorder) DeployEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployEnvironment", reflect.TypeOf((*Mockdeployer)(nil).DeployEnvironment), env)
}

// StreamEnvironmentCreation mocks base method
func (m *Mockdeployer) StreamEnvironmentCreation(env *deploy.CreateEnvironmentInput) (<-chan []deploy.ResourceEvent, <-chan deploy.CreateEnvironmentResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamEnvironmentCreation", env)
	ret0, _ := ret[0].(<-chan []deploy.ResourceEvent)
	ret1, _ := ret[1].(<-chan deploy.CreateEnvironmentResponse)
	return ret0, ret1
}

// StreamEnvironmentCreation indicates an expected call of StreamEnvironmentCreation
func (mr *MockdeployerMockRecorder) StreamEnvironmentCreation(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEnvironmentCreation", reflect.TypeOf((*Mockdeployer)(nil).StreamEnvironmentCreation), env)
}

// DeleteEnvironment mocks base method
func (m *Mockdeployer) DeleteEnvironment(appName, envName, cfnExecRoleARN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", appName, envName, cfnExecRoleARN)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockdeployerMockRecorder) DeleteEnvironment(appName, envName, cfnExecRoleARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*Mockdeployer)(nil).DeleteEnvironment), appName, envName, cfnExecRoleARN)
}

// GetEnvironment mocks base method
func (m *Mockdeployer) GetEnvironment(appName, envName string) (*config.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", appName, envName)
	ret0, _ := ret[0].(*config.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockdeployerMockRecorder) GetEnvironment(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*Mockdeployer)(nil).GetEnvironment), appName, envName)
}

// EnvironmentTemplate mocks base method
func (m *Mockdeployer) EnvironmentTemplate(appName, envName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentTemplate", appName, envName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentTemplate indicates an expected call of EnvironmentTemplate
func (mr *MockdeployerMockRecorder) EnvironmentTemplate(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentTemplate", reflect.TypeOf((*Mockdeployer)(nil).EnvironmentTemplate), appName, envName)
}

// UpdateEnvironmentTemplate mocks base method
func (m *Mockdeployer) UpdateEnvironmentTemplate(appName, envName, templateBody, cfnExecRoleARN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentTemplate", appName, envName, templateBody, cfnExecRoleARN)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironmentTemplate indicates an expected call of UpdateEnvironmentTemplate
func (mr *MockdeployerMockRecorder) UpdateEnvironmentTemplate(appName, envName, templateBody, cfnExecRoleARN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentTemplate", reflect.TypeOf((*Mockdeployer)(nil).UpdateEnvironmentTemplate), appName, envName, templateBody, cfnExecRoleARN)
}

// DeployApp mocks base method
func (m *Mockdeployer) DeployApp(in *deploy.CreateAppInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployApp", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployApp indicates an expected call of DeployApp
func (mr *MockdeployerMockRecorder) DeployApp(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployApp", reflect.TypeOf((*Mockdeployer)(nil).DeployApp), in)
}

// AddServiceToApp mocks base method
func (m *Mockdeployer) AddServiceToApp(app *config.Application, svcName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceToApp", app, svcName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddServiceToApp indicates an expected call of AddServiceToApp
func (mr *MockdeployerMockRecorder) AddServiceToApp(app, svcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceToApp", reflect.TypeOf((*Mockdeployer)(nil).AddServiceToApp), app, svcName)
}

// AddJobToApp mocks base method
func (m *Mockdeployer) AddJobToApp(app *config.Application, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJobToApp", app, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJobToApp indicates an expected call of AddJobToApp
func (mr *MockdeployerMockRecorder) AddJobToApp(app, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJobToApp", reflect.TypeOf((*Mockdeployer)(nil).AddJobToApp), app, jobName)
}

// AddEnvToApp mocks base method
func (m *Mockdeployer) AddEnvToApp(app *config.Application, env *config.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEnvToApp", app, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEnvToApp indicates an expected call of AddEnvToApp
func (mr *MockdeployerMockRecorder) AddEnvToApp(app, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnvToApp", reflect.TypeOf((*Mockdeployer)(nil).AddEnvToApp), app, env)
}

// DelegateDNSPermissions mocks base method
func (m *Mockdeployer) DelegateDNSPermissions(app *config.Application, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateDNSPermissions", app, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelegateDNSPermissions indicates an expected call of DelegateDNSPermissions
func (mr *MockdeployerMockRecorder) DelegateDNSPermissions(app, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateDNSPermissions", reflect.TypeOf((*Mockdeployer)(nil).DelegateDNSPermissions), app, accountID)
}

// DeleteApp mocks base method
func (m *Mockdeployer) DeleteApp(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockdeployerMockRecorder) DeleteApp(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*Mockdeployer)(nil).DeleteApp), name)
}

// CreatePipeline mocks base method
func (m *Mockdeployer) CreatePipeline(env *deploy.CreatePipelineInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline
func (mr *MockdeployerMockRecorder) CreatePipeline(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*Mockdeployer)(nil).CreatePipeline), env)
}

// UpdatePipeline mocks base method
func (m *Mockdeployer) UpdatePipeline(env *deploy.CreatePipelineInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePipeline indicates an expected call of UpdatePipeline
func (mr *MockdeployerMockRecorder) UpdatePipeline(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*Mockdeployer)(nil).UpdatePipeline), env)
}

// PipelineExists mocks base method
func (m *Mockdeployer) PipelineExists(env *deploy.CreatePipelineInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineExists", env)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineExists indicates an expected call of PipelineExists
func (mr *MockdeployerMockRecorder) PipelineExists(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineExists", reflect.TypeOf((*Mockdeployer)(nil).PipelineExists), env)
}

// DeletePipeline mocks base method
func (m *Mockdeployer) DeletePipeline(pipelineName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", pipelineName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockdeployerMockRecorder) DeletePipeline(pipelineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*Mockdeployer)(nil).DeletePipeline), pipelineName)
}

// AddPipelineResourcesToApp mocks base method
func (m *Mockdeployer) AddPipelineResourcesToApp(app *config.Application, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPipelineResourcesToApp", app, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPipelineResourcesToApp indicates an expected call of AddPipelineResourcesToApp
func (mr *MockdeployerMockRecorder) AddPipelineResourcesToApp(app, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPipelineResourcesToApp", reflect.TypeOf((*Mockdeployer)(nil).AddPipelineResourcesToApp), app, region)
}

// GetAppResourcesByRegion mocks base method
func (m *Mockdeployer) GetAppResourcesByRegion(app *config.Application, region string) (*stack.AppRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppResourcesByRegion", app, region)
	ret0, _ := ret[0].(*stack.AppRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppResourcesByRegion indicates an expected call of GetAppResourcesByRegion
func (mr *MockdeployerMockRecorder) GetAppResourcesByRegion(app, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppResourcesByRegion", reflect.TypeOf((*Mockdeployer)(nil).GetAppResourcesByRegion), app, region)
}

// GetRegionalAppResources mocks base method
func (m *Mockdeployer) GetRegionalAppResources(app *config.Application) ([]*stack.AppRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionalAppResources", app)
	ret0, _ := ret[0].([]*stack.AppRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionalAppResources indicates an expected call of GetRegionalAppResources
func (mr *MockdeployerMockRecorder) GetRegionalAppResources(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionalAppResources", reflect.TypeOf((*Mockdeployer)(nil).GetRegionalAppResources), app)
}

// MockdomainValidator is a mock of domainValidator interface
type MockdomainValidator struct {
	ctrl     *gomock.Controller
	recorder *MockdomainValidatorMockRecorder
}

// MockdomainValidatorMockRecorder is the mock recorder for MockdomainValidator
type MockdomainValidatorMockRecorder struct {
	mock *MockdomainValidator
}

// NewMockdomainValidator creates a new mock instance
func NewMockdomainValidator(ctrl *gomock.Controller) *MockdomainValidator {
	mock := &MockdomainValidator{ctrl: ctrl}
	mock.recorder = &MockdomainValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdomainValidator) EXPECT() *MockdomainValidatorMockRecorder {
	return m.recorder
}

// DomainExists mocks base method
func (m *MockdomainValidator) DomainExists(domainName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainExists", domainName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainExists indicates an expected call of DomainExists
func (mr *MockdomainValidatorMockRecorder) DomainExists(domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainExists", reflect.TypeOf((*MockdomainValidator)(nil).DomainExists), domainName)
}

// MockdockerfileParser is a mock of dockerfileParser interface
type MockdockerfileParser struct {
	ctrl     *gomock.Controller
	recorder *MockdockerfileParserMockRecorder
}

// MockdockerfileParserMockRecorder is the mock recorder for MockdockerfileParser
type MockdockerfileParserMockRecorder struct {
	mock *MockdockerfileParser
}

// NewMockdockerfileParser creates a new mock instance
func NewMockdockerfileParser(ctrl *gomock.Controller) *MockdockerfileParser {
	mock := &MockdockerfileParser{ctrl: ctrl}
	mock.recorder = &MockdockerfileParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdockerfileParser) EXPECT() *MockdockerfileParserMockRecorder {
	return m.recorder
}

// GetExposedPorts mocks base method
func (m *MockdockerfileParser) GetExposedPorts() ([]uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposedPorts")
	ret0, _ := ret[0].([]uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExposedPorts indicates an expected call of GetExposedPorts
func (mr *MockdockerfileParserMockRecorder) GetExposedPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposedPorts", reflect.TypeOf((*MockdockerfileParser)(nil).GetExposedPorts))
}

// GetHealthCheck mocks base method
func (m *MockdockerfileParser) GetHealthCheck() (*dockerfile.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheck")
	ret0, _ := ret[0].(*dockerfile.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheck indicates an expected call of GetHealthCheck
func (mr *MockdockerfileParserMockRecorder) GetHealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheck", reflect.TypeOf((*MockdockerfileParser)(nil).GetHealthCheck))
}

// MockstatusDescriber is a mock of statusDescriber interface
type MockstatusDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockstatusDescriberMockRecorder
}

// MockstatusDescriberMockRecorder is the mock recorder for MockstatusDescriber
type MockstatusDescriberMockRecorder struct {
	mock *MockstatusDescriber
}

// NewMockstatusDescriber creates a new mock instance
func NewMockstatusDescriber(ctrl *gomock.Controller) *MockstatusDescriber {
	mock := &MockstatusDescriber{ctrl: ctrl}
	mock.recorder = &MockstatusDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstatusDescriber) EXPECT() *MockstatusDescriberMockRecorder {
	return m.recorder
}

// Describe mocks base method
func (m *MockstatusDescriber) Describe() (*describe.ServiceStatusDesc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe")
	ret0, _ := ret[0].(*describe.ServiceStatusDesc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe
func (mr *MockstatusDescriberMockRecorder) Describe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockstatusDescriber)(nil).Describe))
}

// MockenvDescriber is a mock of envDescriber interface
type MockenvDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockenvDescriberMockRecorder
}

// MockenvDescriberMockRecorder is the mock recorder for MockenvDescriber
type MockenvDescriberMockRecorder struct {
	mock *MockenvDescriber
}

// NewMockenvDescriber creates a new mock instance
func NewMockenvDescriber(ctrl *gomock.Controller) *MockenvDescriber {
	mock := &MockenvDescriber{ctrl: ctrl}
	mock.recorder = &MockenvDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvDescriber) EXPECT() *MockenvDescriberMockRecorder {
	return m.recorder
}

// Describe mocks base method
func (m *MockenvDescriber) Describe() (*describe.EnvDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe")
	ret0, _ := ret[0].(*describe.EnvDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe
func (mr *MockenvDescriberMockRecorder) Describe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockenvDescriber)(nil).Describe))
}

// MockversionGetter is a mock of versionGetter interface
type MockversionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockversionGetterMockRecorder
}

// MockversionGetterMockRecorder is the mock recorder for MockversionGetter
type MockversionGetterMockRecorder struct {
	mock *MockversionGetter
}

// NewMockversionGetter creates a new mock instance
func NewMockversionGetter(ctrl *gomock.Controller) *MockversionGetter {
	mock := &MockversionGetter{ctrl: ctrl}
	mock.recorder = &MockversionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockversionGetter) EXPECT() *MockversionGetterMockRecorder {
	return m.recorder
}

// Version mocks base method
func (m *MockversionGetter) Version() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version
func (mr *MockversionGetterMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockversionGetter)(nil).Version))
}

// MockenvTemplater is a mock of envTemplater interface
type MockenvTemplater struct {
	ctrl     *gomock.Controller
	recorder *MockenvTemplaterMockRecorder
}

// MockenvTemplaterMockRecorder is the mock recorder for MockenvTemplater
type MockenvTemplaterMockRecorder struct {
	mock *MockenvTemplater
}

// NewMockenvTemplater creates a new mock instance
func NewMockenvTemplater(ctrl *gomock.Controller) *MockenvTemplater {
	mock := &MockenvTemplater{ctrl: ctrl}
	mock.recorder = &MockenvTemplaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvTemplater) EXPECT() *MockenvTemplaterMockRecorder {
	return m.recorder
}

// EnvironmentTemplate mocks base method
func (m *MockenvTemplater) EnvironmentTemplate(appName, envName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentTemplate", appName, envName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentTemplate indicates an expected call of EnvironmentTemplate
func (mr *MockenvTemplaterMockRecorder) EnvironmentTemplate(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentTemplate", reflect.TypeOf((*MockenvTemplater)(nil).EnvironmentTemplate), appName, envName)
}

// MockenvUpgrader is a mock of envUpgrader interface
type MockenvUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockenvUpgraderMockRecorder
}

// MockenvUpgraderMockRecorder is the mock recorder for MockenvUpgrader
type MockenvUpgraderMockRecorder struct {
	mock *MockenvUpgrader
}

// NewMockenvUpgrader creates a new mock instance
func NewMockenvUpgrader(ctrl *gomock.Controller) *MockenvUpgrader {
	mock := &MockenvUpgrader{ctrl: ctrl}
	mock.recorder = &MockenvUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvUpgrader) EXPECT() *MockenvUpgraderMockRecorder {
	return m.recorder
}

// UpgradeEnvironment mocks base method
func (m *MockenvUpgrader) UpgradeEnvironment(in *deploy.CreateEnvironmentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeEnvironment", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeEnvironment indicates an expected call of UpgradeEnvironment
func (mr *MockenvUpgraderMockRecorder) UpgradeEnvironment(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeEnvironment", reflect.TypeOf((*MockenvUpgrader)(nil).UpgradeEnvironment), in)
}

// MocklegacyEnvUpgrader is a mock of legacyEnvUpgrader interface
type MocklegacyEnvUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MocklegacyEnvUpgraderMockRecorder
}

// MocklegacyEnvUpgraderMockRecorder is the mock recorder for MocklegacyEnvUpgrader
type MocklegacyEnvUpgraderMockRecorder struct {
	mock *MocklegacyEnvUpgrader
}

// NewMocklegacyEnvUpgrader creates a new mock instance
func NewMocklegacyEnvUpgrader(ctrl *gomock.Controller) *MocklegacyEnvUpgrader {
	mock := &MocklegacyEnvUpgrader{ctrl: ctrl}
	mock.recorder = &MocklegacyEnvUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocklegacyEnvUpgrader) EXPECT() *MocklegacyEnvUpgraderMockRecorder {
	return m.recorder
}

// UpgradeLegacyEnvironment mocks base method
func (m *MocklegacyEnvUpgrader) UpgradeLegacyEnvironment(in *deploy.CreateEnvironmentInput, lbWebServices ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{in}
	for _, a := range lbWebServices {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeLegacyEnvironment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeLegacyEnvironment indicates an expected call of UpgradeLegacyEnvironment
func (mr *MocklegacyEnvUpgraderMockRecorder) UpgradeLegacyEnvironment(in interface{}, lbWebServices ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{in}, lbWebServices...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeLegacyEnvironment", reflect.TypeOf((*MocklegacyEnvUpgrader)(nil).UpgradeLegacyEnvironment), varargs...)
}

// EnvironmentTemplate mocks base method
func (m *MocklegacyEnvUpgrader) EnvironmentTemplate(appName, envName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentTemplate", appName, envName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentTemplate indicates an expected call of EnvironmentTemplate
func (mr *MocklegacyEnvUpgraderMockRecorder) EnvironmentTemplate(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentTemplate", reflect.TypeOf((*MocklegacyEnvUpgrader)(nil).EnvironmentTemplate), appName, envName)
}

// MockenvTemplateUpgrader is a mock of envTemplateUpgrader interface
type MockenvTemplateUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockenvTemplateUpgraderMockRecorder
}

// MockenvTemplateUpgraderMockRecorder is the mock recorder for MockenvTemplateUpgrader
type MockenvTemplateUpgraderMockRecorder struct {
	mock *MockenvTemplateUpgrader
}

// NewMockenvTemplateUpgrader creates a new mock instance
func NewMockenvTemplateUpgrader(ctrl *gomock.Controller) *MockenvTemplateUpgrader {
	mock := &MockenvTemplateUpgrader{ctrl: ctrl}
	mock.recorder = &MockenvTemplateUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvTemplateUpgrader) EXPECT() *MockenvTemplateUpgraderMockRecorder {
	return m.recorder
}

// UpgradeEnvironment mocks base method
func (m *MockenvTemplateUpgrader) UpgradeEnvironment(in *deploy.CreateEnvironmentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeEnvironment", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeEnvironment indicates an expected call of UpgradeEnvironment
func (mr *MockenvTemplateUpgraderMockRecorder) UpgradeEnvironment(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeEnvironment", reflect.TypeOf((*MockenvTemplateUpgrader)(nil).UpgradeEnvironment), in)
}

// UpgradeLegacyEnvironment mocks base method
func (m *MockenvTemplateUpgrader) UpgradeLegacyEnvironment(in *deploy.CreateEnvironmentInput, lbWebServices ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{in}
	for _, a := range lbWebServices {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeLegacyEnvironment", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeLegacyEnvironment indicates an expected call of UpgradeLegacyEnvironment
func (mr *MockenvTemplateUpgraderMockRecorder) UpgradeLegacyEnvironment(in interface{}, lbWebServices ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{in}, lbWebServices...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeLegacyEnvironment", reflect.TypeOf((*MockenvTemplateUpgrader)(nil).UpgradeLegacyEnvironment), varargs...)
}

// EnvironmentTemplate mocks base method
func (m *MockenvTemplateUpgrader) EnvironmentTemplate(appName, envName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentTemplate", appName, envName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentTemplate indicates an expected call of EnvironmentTemplate
func (mr *MockenvTemplateUpgraderMockRecorder) EnvironmentTemplate(appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentTemplate", reflect.TypeOf((*MockenvTemplateUpgrader)(nil).EnvironmentTemplate), appName, envName)
}

// MockpipelineGetter is a mock of pipelineGetter interface
type MockpipelineGetter struct {
	ctrl     *gomock.Controller
	recorder *MockpipelineGetterMockRecorder
}

// MockpipelineGetterMockRecorder is the mock recorder for MockpipelineGetter
type MockpipelineGetterMockRecorder struct {
	mock *MockpipelineGetter
}

// NewMockpipelineGetter creates a new mock instance
func NewMockpipelineGetter(ctrl *gomock.Controller) *MockpipelineGetter {
	mock := &MockpipelineGetter{ctrl: ctrl}
	mock.recorder = &MockpipelineGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpipelineGetter) EXPECT() *MockpipelineGetterMockRecorder {
	return m.recorder
}

// GetPipeline mocks base method
func (m *MockpipelineGetter) GetPipeline(pipelineName string) (*codepipeline.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", pipelineName)
	ret0, _ := ret[0].(*codepipeline.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline
func (mr *MockpipelineGetterMockRecorder) GetPipeline(pipelineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockpipelineGetter)(nil).GetPipeline), pipelineName)
}

// ListPipelineNamesByTags mocks base method
func (m *MockpipelineGetter) ListPipelineNamesByTags(tags map[string]string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelineNamesByTags", tags)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelineNamesByTags indicates an expected call of ListPipelineNamesByTags
func (mr *MockpipelineGetterMockRecorder) ListPipelineNamesByTags(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineNamesByTags", reflect.TypeOf((*MockpipelineGetter)(nil).ListPipelineNamesByTags), tags)
}

// GetPipelinesByTags mocks base method
func (m *MockpipelineGetter) GetPipelinesByTags(tags map[string]string) ([]*codepipeline.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelinesByTags", tags)
	ret0, _ := ret[0].([]*codepipeline.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelinesByTags indicates an expected call of GetPipelinesByTags
func (mr *MockpipelineGetterMockRecorder) GetPipelinesByTags(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelinesByTags", reflect.TypeOf((*MockpipelineGetter)(nil).GetPipelinesByTags), tags)
}

// Mockexecutor is a mock of executor interface
type Mockexecutor struct {
	ctrl     *gomock.Controller
	recorder *MockexecutorMockRecorder
}

// MockexecutorMockRecorder is the mock recorder for Mockexecutor
type MockexecutorMockRecorder struct {
	mock *Mockexecutor
}

// NewMockexecutor creates a new mock instance
func NewMockexecutor(ctrl *gomock.Controller) *Mockexecutor {
	mock := &Mockexecutor{ctrl: ctrl}
	mock.recorder = &MockexecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockexecutor) EXPECT() *MockexecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *Mockexecutor) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockexecutorMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*Mockexecutor)(nil).Execute))
}

// MockdeletePipelineRunner is a mock of deletePipelineRunner interface
type MockdeletePipelineRunner struct {
	ctrl     *gomock.Controller
	recorder *MockdeletePipelineRunnerMockRecorder
}

// MockdeletePipelineRunnerMockRecorder is the mock recorder for MockdeletePipelineRunner
type MockdeletePipelineRunnerMockRecorder struct {
	mock *MockdeletePipelineRunner
}

// NewMockdeletePipelineRunner creates a new mock instance
func NewMockdeletePipelineRunner(ctrl *gomock.Controller) *MockdeletePipelineRunner {
	mock := &MockdeletePipelineRunner{ctrl: ctrl}
	mock.recorder = &MockdeletePipelineRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdeletePipelineRunner) EXPECT() *MockdeletePipelineRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockdeletePipelineRunner) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockdeletePipelineRunnerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockdeletePipelineRunner)(nil).Run))
}

// MockexecuteAsker is a mock of executeAsker interface
type MockexecuteAsker struct {
	ctrl     *gomock.Controller
	recorder *MockexecuteAskerMockRecorder
}

// MockexecuteAskerMockRecorder is the mock recorder for MockexecuteAsker
type MockexecuteAskerMockRecorder struct {
	mock *MockexecuteAsker
}

// NewMockexecuteAsker creates a new mock instance
func NewMockexecuteAsker(ctrl *gomock.Controller) *MockexecuteAsker {
	mock := &MockexecuteAsker{ctrl: ctrl}
	mock.recorder = &MockexecuteAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockexecuteAsker) EXPECT() *MockexecuteAskerMockRecorder {
	return m.recorder
}

// Ask mocks base method
func (m *MockexecuteAsker) Ask() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ask indicates an expected call of Ask
func (mr *MockexecuteAskerMockRecorder) Ask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockexecuteAsker)(nil).Ask))
}

// Execute mocks base method
func (m *MockexecuteAsker) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockexecuteAskerMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockexecuteAsker)(nil).Execute))
}

// MockappSelector is a mock of appSelector interface
type MockappSelector struct {
	ctrl     *gomock.Controller
	recorder *MockappSelectorMockRecorder
}

// MockappSelectorMockRecorder is the mock recorder for MockappSelector
type MockappSelectorMockRecorder struct {
	mock *MockappSelector
}

// NewMockappSelector creates a new mock instance
func NewMockappSelector(ctrl *gomock.Controller) *MockappSelector {
	mock := &MockappSelector{ctrl: ctrl}
	mock.recorder = &MockappSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappSelector) EXPECT() *MockappSelectorMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockappSelector) Application(prompt, help string, additionalOpts ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help}
	for _, a := range additionalOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Application", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockappSelectorMockRecorder) Application(prompt, help interface{}, additionalOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help}, additionalOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockappSelector)(nil).Application), varargs...)
}

// MockappEnvSelector is a mock of appEnvSelector interface
type MockappEnvSelector struct {
	ctrl     *gomock.Controller
	recorder *MockappEnvSelectorMockRecorder
}

// MockappEnvSelectorMockRecorder is the mock recorder for MockappEnvSelector
type MockappEnvSelectorMockRecorder struct {
	mock *MockappEnvSelector
}

// NewMockappEnvSelector creates a new mock instance
func NewMockappEnvSelector(ctrl *gomock.Controller) *MockappEnvSelector {
	mock := &MockappEnvSelector{ctrl: ctrl}
	mock.recorder = &MockappEnvSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappEnvSelector) EXPECT() *MockappEnvSelectorMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockappEnvSelector) Application(prompt, help string, additionalOpts ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help}
	for _, a := range additionalOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Application", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockappEnvSelectorMockRecorder) Application(prompt, help interface{}, additionalOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help}, additionalOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockappEnvSelector)(nil).Application), varargs...)
}

// Environment mocks base method
func (m *MockappEnvSelector) Environment(prompt, help, app string, additionalOpts ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help, app}
	for _, a := range additionalOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Environment", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environment indicates an expected call of Environment
func (mr *MockappEnvSelectorMockRecorder) Environment(prompt, help, app interface{}, additionalOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help, app}, additionalOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockappEnvSelector)(nil).Environment), varargs...)
}

// MockconfigSelector is a mock of configSelector interface
type MockconfigSelector struct {
	ctrl     *gomock.Controller
	recorder *MockconfigSelectorMockRecorder
}

// MockconfigSelectorMockRecorder is the mock recorder for MockconfigSelector
type MockconfigSelectorMockRecorder struct {
	mock *MockconfigSelector
}

// NewMockconfigSelector creates a new mock instance
func NewMockconfigSelector(ctrl *gomock.Controller) *MockconfigSelector {
	mock := &MockconfigSelector{ctrl: ctrl}
	mock.recorder = &MockconfigSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockconfigSelector) EXPECT() *MockconfigSelectorMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockconfigSelector) Application(prompt, help string, additionalOpts ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help}
	for _, a := range additionalOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Application", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockconfigSelectorMockRecorder) Application(prompt, help interface{}, additionalOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help}, additionalOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockconfigSelector)(nil).Application), varargs...)
}

// Environment mocks base method
func (m *MockconfigSelector) Environment(prompt, help, app string, additionalOpts ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help, app}
	for _, a := range additionalOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Environment", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environment indicates an expected call of Environment
func (mr *MockconfigSelectorMockRecorder) Environment(prompt, help, app interface{}, additionalOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help, app}, additionalOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockconfigSelector)(nil).Environment), varargs...)
}

// Service mocks base method
func (m *MockconfigSelector) Service(prompt, help, app string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", prompt, help, app)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Service indicates an expected call of Service
func (mr *MockconfigSelectorMockRecorder) Service(prompt, help, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockconfigSelector)(nil).Service), prompt, help, app)
}

// MockdeploySelector is a mock of deploySelector interface
type MockdeploySelector struct {
	ctrl     *gomock.Controller
	recorder *MockdeploySelectorMockRecorder
}

// MockdeploySelectorMockRecorder is the mock recorder for MockdeploySelector
type MockdeploySelectorMockRecorder struct {
	mock *MockdeploySelector
}

// NewMockdeploySelector creates a new mock instance
func NewMockdeploySelector(ctrl *gomock.Controller) *MockdeploySelector {
	mock := &MockdeploySelector{ctrl: ctrl}
	mock.recorder = &MockdeploySelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdeploySelector) EXPECT() *MockdeploySelectorMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockdeploySelector) Application(prompt, help string, additionalOpts ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help}
	for _, a := range additionalOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Application", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockdeploySelectorMockRecorder) Application(prompt, help interface{}, additionalOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help}, additionalOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockdeploySelector)(nil).Application), varargs...)
}

// DeployedService mocks base method
func (m *MockdeploySelector) DeployedService(prompt, help, app string, opts ...selector.GetDeployedServiceOpts) (*selector.DeployedService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help, app}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployedService", varargs...)
	ret0, _ := ret[0].(*selector.DeployedService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployedService indicates an expected call of DeployedService
func (mr *MockdeploySelectorMockRecorder) DeployedService(prompt, help, app interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help, app}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployedService", reflect.TypeOf((*MockdeploySelector)(nil).DeployedService), varargs...)
}

// MockwsSelector is a mock of wsSelector interface
type MockwsSelector struct {
	ctrl     *gomock.Controller
	recorder *MockwsSelectorMockRecorder
}

// MockwsSelectorMockRecorder is the mock recorder for MockwsSelector
type MockwsSelectorMockRecorder struct {
	mock *MockwsSelector
}

// NewMockwsSelector creates a new mock instance
func NewMockwsSelector(ctrl *gomock.Controller) *MockwsSelector {
	mock := &MockwsSelector{ctrl: ctrl}
	mock.recorder = &MockwsSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsSelector) EXPECT() *MockwsSelectorMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockwsSelector) Application(prompt, help string, additionalOpts ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help}
	for _, a := range additionalOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Application", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockwsSelectorMockRecorder) Application(prompt, help interface{}, additionalOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help}, additionalOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockwsSelector)(nil).Application), varargs...)
}

// Environment mocks base method
func (m *MockwsSelector) Environment(prompt, help, app string, additionalOpts ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{prompt, help, app}
	for _, a := range additionalOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Environment", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environment indicates an expected call of Environment
func (mr *MockwsSelectorMockRecorder) Environment(prompt, help, app interface{}, additionalOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{prompt, help, app}, additionalOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockwsSelector)(nil).Environment), varargs...)
}

// Service mocks base method
func (m *MockwsSelector) Service(prompt, help string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", prompt, help)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Service indicates an expected call of Service
func (mr *MockwsSelectorMockRecorder) Service(prompt, help interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockwsSelector)(nil).Service), prompt, help)
}

// Job mocks base method
func (m *MockwsSelector) Job(prompt, help string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job", prompt, help)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Job indicates an expected call of Job
func (mr *MockwsSelectorMockRecorder) Job(prompt, help interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockwsSelector)(nil).Job), prompt, help)
}

// Workload mocks base method
func (m *MockwsSelector) Workload(msg, help string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workload", msg, help)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Workload indicates an expected call of Workload
func (mr *MockwsSelectorMockRecorder) Workload(msg, help interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workload", reflect.TypeOf((*MockwsSelector)(nil).Workload), msg, help)
}

// MockinitJobSelector is a mock of initJobSelector interface
type MockinitJobSelector struct {
	ctrl     *gomock.Controller
	recorder *MockinitJobSelectorMockRecorder
}

// MockinitJobSelectorMockRecorder is the mock recorder for MockinitJobSelector
type MockinitJobSelectorMockRecorder struct {
	mock *MockinitJobSelector
}

// NewMockinitJobSelector creates a new mock instance
func NewMockinitJobSelector(ctrl *gomock.Controller) *MockinitJobSelector {
	mock := &MockinitJobSelector{ctrl: ctrl}
	mock.recorder = &MockinitJobSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockinitJobSelector) EXPECT() *MockinitJobSelectorMockRecorder {
	return m.recorder
}

// Dockerfile mocks base method
func (m *MockinitJobSelector) Dockerfile(selPrompt, notFoundPrompt, selHelp, notFoundHelp string, pv prompt.ValidatorFunc) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dockerfile", selPrompt, notFoundPrompt, selHelp, notFoundHelp, pv)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dockerfile indicates an expected call of Dockerfile
func (mr *MockinitJobSelectorMockRecorder) Dockerfile(selPrompt, notFoundPrompt, selHelp, notFoundHelp, pv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dockerfile", reflect.TypeOf((*MockinitJobSelector)(nil).Dockerfile), selPrompt, notFoundPrompt, selHelp, notFoundHelp, pv)
}

// Schedule mocks base method
func (m *MockinitJobSelector) Schedule(scheduleTypePrompt, scheduleTypeHelp string, scheduleValidator, rateValidator prompt.ValidatorFunc) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", scheduleTypePrompt, scheduleTypeHelp, scheduleValidator, rateValidator)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedule indicates an expected call of Schedule
func (mr *MockinitJobSelectorMockRecorder) Schedule(scheduleTypePrompt, scheduleTypeHelp, scheduleValidator, rateValidator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockinitJobSelector)(nil).Schedule), scheduleTypePrompt, scheduleTypeHelp, scheduleValidator, rateValidator)
}

// MockdockerfileSelector is a mock of dockerfileSelector interface
type MockdockerfileSelector struct {
	ctrl     *gomock.Controller
	recorder *MockdockerfileSelectorMockRecorder
}

// MockdockerfileSelectorMockRecorder is the mock recorder for MockdockerfileSelector
type MockdockerfileSelectorMockRecorder struct {
	mock *MockdockerfileSelector
}

// NewMockdockerfileSelector creates a new mock instance
func NewMockdockerfileSelector(ctrl *gomock.Controller) *MockdockerfileSelector {
	mock := &MockdockerfileSelector{ctrl: ctrl}
	mock.recorder = &MockdockerfileSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdockerfileSelector) EXPECT() *MockdockerfileSelectorMockRecorder {
	return m.recorder
}

// Dockerfile mocks base method
func (m *MockdockerfileSelector) Dockerfile(selPrompt, notFoundPrompt, selHelp, notFoundHelp string, pv prompt.ValidatorFunc) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dockerfile", selPrompt, notFoundPrompt, selHelp, notFoundHelp, pv)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dockerfile indicates an expected call of Dockerfile
func (mr *MockdockerfileSelectorMockRecorder) Dockerfile(selPrompt, notFoundPrompt, selHelp, notFoundHelp, pv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dockerfile", reflect.TypeOf((*MockdockerfileSelector)(nil).Dockerfile), selPrompt, notFoundPrompt, selHelp, notFoundHelp, pv)
}

// Mockec2Selector is a mock of ec2Selector interface
type Mockec2Selector struct {
	ctrl     *gomock.Controller
	recorder *Mockec2SelectorMockRecorder
}

// Mockec2SelectorMockRecorder is the mock recorder for Mockec2Selector
type Mockec2SelectorMockRecorder struct {
	mock *Mockec2Selector
}

// NewMockec2Selector creates a new mock instance
func NewMockec2Selector(ctrl *gomock.Controller) *Mockec2Selector {
	mock := &Mockec2Selector{ctrl: ctrl}
	mock.recorder = &Mockec2SelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockec2Selector) EXPECT() *Mockec2SelectorMockRecorder {
	return m.recorder
}

// VPC mocks base method
func (m *Mockec2Selector) VPC(prompt, help string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VPC", prompt, help)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VPC indicates an expected call of VPC
func (mr *Mockec2SelectorMockRecorder) VPC(prompt, help interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VPC", reflect.TypeOf((*Mockec2Selector)(nil).VPC), prompt, help)
}

// PublicSubnets mocks base method
func (m *Mockec2Selector) PublicSubnets(prompt, help, vpcID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicSubnets", prompt, help, vpcID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicSubnets indicates an expected call of PublicSubnets
func (mr *Mockec2SelectorMockRecorder) PublicSubnets(prompt, help, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicSubnets", reflect.TypeOf((*Mockec2Selector)(nil).PublicSubnets), prompt, help, vpcID)
}

// PrivateSubnets mocks base method
func (m *Mockec2Selector) PrivateSubnets(prompt, help, vpcID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateSubnets", prompt, help, vpcID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateSubnets indicates an expected call of PrivateSubnets
func (mr *Mockec2SelectorMockRecorder) PrivateSubnets(prompt, help, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateSubnets", reflect.TypeOf((*Mockec2Selector)(nil).PrivateSubnets), prompt, help, vpcID)
}

// MockcredsSelector is a mock of credsSelector interface
type MockcredsSelector struct {
	ctrl     *gomock.Controller
	recorder *MockcredsSelectorMockRecorder
}

// MockcredsSelectorMockRecorder is the mock recorder for MockcredsSelector
type MockcredsSelectorMockRecorder struct {
	mock *MockcredsSelector
}

// NewMockcredsSelector creates a new mock instance
func NewMockcredsSelector(ctrl *gomock.Controller) *MockcredsSelector {
	mock := &MockcredsSelector{ctrl: ctrl}
	mock.recorder = &MockcredsSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcredsSelector) EXPECT() *MockcredsSelectorMockRecorder {
	return m.recorder
}

// Creds mocks base method
func (m *MockcredsSelector) Creds(prompt, help string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Creds", prompt, help)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Creds indicates an expected call of Creds
func (mr *MockcredsSelectorMockRecorder) Creds(prompt, help interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creds", reflect.TypeOf((*MockcredsSelector)(nil).Creds), prompt, help)
}

// Mockec2Client is a mock of ec2Client interface
type Mockec2Client struct {
	ctrl     *gomock.Controller
	recorder *Mockec2ClientMockRecorder
}

// Mockec2ClientMockRecorder is the mock recorder for Mockec2Client
type Mockec2ClientMockRecorder struct {
	mock *Mockec2Client
}

// NewMockec2Client creates a new mock instance
func NewMockec2Client(ctrl *gomock.Controller) *Mockec2Client {
	mock := &Mockec2Client{ctrl: ctrl}
	mock.recorder = &Mockec2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockec2Client) EXPECT() *Mockec2ClientMockRecorder {
	return m.recorder
}

// HasDNSSupport mocks base method
func (m *Mockec2Client) HasDNSSupport(vpcID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDNSSupport", vpcID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasDNSSupport indicates an expected call of HasDNSSupport
func (mr *Mockec2ClientMockRecorder) HasDNSSupport(vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDNSSupport", reflect.TypeOf((*Mockec2Client)(nil).HasDNSSupport), vpcID)
}

// MockjobInitializer is a mock of jobInitializer interface
type MockjobInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockjobInitializerMockRecorder
}

// MockjobInitializerMockRecorder is the mock recorder for MockjobInitializer
type MockjobInitializerMockRecorder struct {
	mock *MockjobInitializer
}

// NewMockjobInitializer creates a new mock instance
func NewMockjobInitializer(ctrl *gomock.Controller) *MockjobInitializer {
	mock := &MockjobInitializer{ctrl: ctrl}
	mock.recorder = &MockjobInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockjobInitializer) EXPECT() *MockjobInitializerMockRecorder {
	return m.recorder
}

// Job mocks base method
func (m *MockjobInitializer) Job(props *initialize.JobProps) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job", props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Job indicates an expected call of Job
func (mr *MockjobInitializerMockRecorder) Job(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockjobInitializer)(nil).Job), props)
}

// MocksvcInitializer is a mock of svcInitializer interface
type MocksvcInitializer struct {
	ctrl     *gomock.Controller
	recorder *MocksvcInitializerMockRecorder
}

// MocksvcInitializerMockRecorder is the mock recorder for MocksvcInitializer
type MocksvcInitializerMockRecorder struct {
	mock *MocksvcInitializer
}

// NewMocksvcInitializer creates a new mock instance
func NewMocksvcInitializer(ctrl *gomock.Controller) *MocksvcInitializer {
	mock := &MocksvcInitializer{ctrl: ctrl}
	mock.recorder = &MocksvcInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksvcInitializer) EXPECT() *MocksvcInitializerMockRecorder {
	return m.recorder
}

// Service mocks base method
func (m *MocksvcInitializer) Service(props *initialize.ServiceProps) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Service indicates an expected call of Service
func (mr *MocksvcInitializerMockRecorder) Service(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MocksvcInitializer)(nil).Service), props)
}

// MockroleDeleter is a mock of roleDeleter interface
type MockroleDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockroleDeleterMockRecorder
}

// MockroleDeleterMockRecorder is the mock recorder for MockroleDeleter
type MockroleDeleterMockRecorder struct {
	mock *MockroleDeleter
}

// NewMockroleDeleter creates a new mock instance
func NewMockroleDeleter(ctrl *gomock.Controller) *MockroleDeleter {
	mock := &MockroleDeleter{ctrl: ctrl}
	mock.recorder = &MockroleDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockroleDeleter) EXPECT() *MockroleDeleterMockRecorder {
	return m.recorder
}

// DeleteRole mocks base method
func (m *MockroleDeleter) DeleteRole(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockroleDeleterMockRecorder) DeleteRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockroleDeleter)(nil).DeleteRole), arg0)
}

// MockactiveWorkloadTasksLister is a mock of activeWorkloadTasksLister interface
type MockactiveWorkloadTasksLister struct {
	ctrl     *gomock.Controller
	recorder *MockactiveWorkloadTasksListerMockRecorder
}

// MockactiveWorkloadTasksListerMockRecorder is the mock recorder for MockactiveWorkloadTasksLister
type MockactiveWorkloadTasksListerMockRecorder struct {
	mock *MockactiveWorkloadTasksLister
}

// NewMockactiveWorkloadTasksLister creates a new mock instance
func NewMockactiveWorkloadTasksLister(ctrl *gomock.Controller) *MockactiveWorkloadTasksLister {
	mock := &MockactiveWorkloadTasksLister{ctrl: ctrl}
	mock.recorder = &MockactiveWorkloadTasksListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockactiveWorkloadTasksLister) EXPECT() *MockactiveWorkloadTasksListerMockRecorder {
	return m.recorder
}

// ListActiveWorkloadTasks mocks base method
func (m *MockactiveWorkloadTasksLister) ListActiveWorkloadTasks(app, env, workload string) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveWorkloadTasks", app, env, workload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListActiveWorkloadTasks indicates an expected call of ListActiveWorkloadTasks
func (mr *MockactiveWorkloadTasksListerMockRecorder) ListActiveWorkloadTasks(app, env, workload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveWorkloadTasks", reflect.TypeOf((*MockactiveWorkloadTasksLister)(nil).ListActiveWorkloadTasks), app, env, workload)
}

// MocktasksStopper is a mock of tasksStopper interface
type MocktasksStopper struct {
	ctrl     *gomock.Controller
	recorder *MocktasksStopperMockRecorder
}

// MocktasksStopperMockRecorder is the mock recorder for MocktasksStopper
type MocktasksStopperMockRecorder struct {
	mock *MocktasksStopper
}

// NewMocktasksStopper creates a new mock instance
func NewMocktasksStopper(ctrl *gomock.Controller) *MocktasksStopper {
	mock := &MocktasksStopper{ctrl: ctrl}
	mock.recorder = &MocktasksStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktasksStopper) EXPECT() *MocktasksStopperMockRecorder {
	return m.recorder
}

// StopTasks mocks base method
func (m *MocktasksStopper) StopTasks(tasks []string, opts ...ecs.StopTasksOpts) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tasks}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopTasks", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTasks indicates an expected call of StopTasks
func (mr *MocktasksStopperMockRecorder) StopTasks(tasks interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tasks}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTasks", reflect.TypeOf((*MocktasksStopper)(nil).StopTasks), varargs...)
}
