# Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template that represents a load balanced web service on Amazon ECS.
Parameters:
  AppName:
    Type: String
  EnvName:
    Type: String
  WorkloadName:
    Type: String
  ContainerImage:
    Type: String
  ContainerPort:
    Type: Number
  RulePath:
    Type: String
  TaskCPU:
    Type: String
  TaskMemory:
    Type: String
  TaskCount:
    Type: Number
  HTTPSEnabled:
    Type: String
    AllowedValues: [true, false]
  LogRetention:
    Type: Number
  AddonsTemplateURL:
    Description: 'URL of the addons nested stack template within the S3 bucket.'
    Type: String
    Default: ""
  TargetContainer:
    Type: String
  TargetPort:
    Type: Number
  Stickiness:
    Type: String
    Default: false
Conditions:
  HTTPLoadBalancer:
    !Not
      - !Condition HTTPSLoadBalancer
  HTTPSLoadBalancer:
    !Equals [!Ref HTTPSEnabled, true]
  HasAddons: # If a bucket URL is specified, that means the template exists.
    !Not [!Equals [!Ref AddonsTemplateURL, ""]]
  HTTPRootPath: # If we're using path based routing and use the root path, we have some special logic
    !Equals [!Ref RulePath, "/"]
Resources:
{{include "loggroup" . | indent 2}}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
{{include "fargate-taskdef-base-properties" . | indent 6}}
      ContainerDefinitions:
        - Name: !Ref WorkloadName
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
{{include "envvars" . | indent 10}}
          - Name: COPILOT_LB_DNS
            Value: !GetAtt EnvControllerAction.PublicLoadBalancerDNSName
{{include "secrets" . | indent 10}}
{{include "logconfig" . | indent 10}}
{{include "sidecars" . | indent 8}}
{{include "executionrole" . | indent 2}}
{{include "taskrole" . | indent 2}}
{{include "servicediscovery" . | indent 2}}
{{- if .Autoscaling}}
{{include "autoscaling" . | indent 2}}
  {{if .Autoscaling.Requests}}
  AutoScalingPolicyALBSumRequestCountPerTarget:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['-', [!Ref WorkloadName, ALBSumRequestCountPerTarget, ScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        CustomizedMetricSpecification:
          Dimensions:
            - Name: LoadBalancer
              Value: !GetAtt EnvControllerAction.PublicLoadBalancerFullName
            - Name: TargetGroup
              Value: !GetAtt TargetGroup.TargetGroupFullName
          MetricName: RequestCountPerTarget
          Namespace: AWS/ApplicationELB
          Statistic: Sum
        ScaleInCooldown: 120
        ScaleOutCooldown: 60
        TargetValue: {{.Autoscaling.Requests}}
  {{- end}}
  {{if .Autoscaling.ResponseTime}}
  AutoScalingPolicyALBAverageResponseTime:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['-', [!Ref WorkloadName, ALBAverageResponseTime, ScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        CustomizedMetricSpecification:
          Dimensions:
            - Name: LoadBalancer
              Value: !GetAtt EnvControllerAction.PublicLoadBalancerFullName
            - Name: TargetGroup
              Value: !GetAtt TargetGroup.TargetGroupFullName
          MetricName: TargetResponseTime
          Namespace: AWS/ApplicationELB
          Statistic: Average
        ScaleInCooldown: 120
        ScaleOutCooldown: 60
        TargetValue: {{.Autoscaling.ResponseTime}}
  {{- end}}
{{- end}}

{{include "env-controller" . | indent 2}}

  Service:
    Type: AWS::ECS::Service
    DependsOn: WaitUntilListenerRuleIsCreated
    Properties:
{{include "service-base-properties" . | indent 6}}
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: !Ref TargetContainer
          ContainerPort: !Ref TargetPort
          TargetGroupArn: !Ref TargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn
          Port: !Ref ContainerPort

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: {{.HTTPHealthCheck.HealthCheckPath}} # Default is '/'.
{{- if .HTTPHealthCheck.HealthyThreshold}}
      HealthyThresholdCount: {{.HTTPHealthCheck.HealthyThreshold}}
{{- end}}
{{- if .HTTPHealthCheck.UnhealthyThreshold}}
      UnhealthyThresholdCount: {{.HTTPHealthCheck.UnhealthyThreshold}}
{{- end}}
{{- if .HTTPHealthCheck.Interval}}
      HealthCheckIntervalSeconds: {{.HTTPHealthCheck.Interval}}
{{- end}}
{{- if .HTTPHealthCheck.Timeout}}
      HealthCheckTimeoutSeconds: {{.HTTPHealthCheck.Timeout}}
{{- end}}
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60                  # Default is 300.
        - Key: stickiness.enabled
          Value: !Ref Stickiness
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${AppName}-${EnvName}-VpcId"

  LoadBalancerDNSAlias:
    Type: AWS::Route53::RecordSetGroup
    Condition: HTTPSLoadBalancer
    Properties:
      HostedZoneId:
        Fn::ImportValue:
          !Sub "${AppName}-${EnvName}-HostedZone"
      Comment: !Sub "LoadBalancer alias for service ${WorkloadName}"
      RecordSets:
      - Name:
          !Join
            - '.'
            - - !Ref WorkloadName
              - Fn::ImportValue:
                  !Sub "${AppName}-${EnvName}-SubDomain"
              - ""
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt EnvControllerAction.PublicLoadBalancerHostedZone
          DNSName: !GetAtt EnvControllerAction.PublicLoadBalancerDNSName

  RulePriorityFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{.RulePriorityLambda}}
      Handler: "index.nextAvailableRulePriorityHandler"
      Timeout: 600
      MemorySize: 512
      Role: !GetAtt 'CustomResourceRole.Arn'
      Runtime: nodejs10.x

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "DNSandACMAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - elasticloadbalancing:DescribeRules
              Resource: "*"
{{- if .Autoscaling }}
        - PolicyName: "DelegateDesiredCountAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: ECS
              Effect: Allow
              Action:
                - ecs:DescribeServices
              Resource: "*"
              Condition: 
                ArnEquals: 
                  'ecs:cluster':
                    Fn::Sub:
                      - arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}
                      - ClusterName:
                          Fn::ImportValue:
                            !Sub '${AppName}-${EnvName}-ClusterId'
            - Sid: ResourceGroups
              Effect: Allow
              Action:
                - resource-groups:GetResources
              Resource: "*"
            - Sid: Tags
              Effect: Allow
              Action:
                - "tag:GetResources"
              Resource: "*"
{{- end}}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HTTPSRulePriorityAction:
    Condition: HTTPSLoadBalancer
    Type: Custom::RulePriorityFunction
    Properties:
      ServiceToken: !GetAtt RulePriorityFunction.Arn
      ListenerArn: !GetAtt EnvControllerAction.HTTPSListenerArn

  HTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HTTPSLoadBalancer
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values:
              - Fn::Join:
                - '.'
                - - !Ref WorkloadName
                  - Fn::ImportValue:
                      !Sub "${AppName}-${EnvName}-SubDomain"
      ListenerArn: !GetAtt EnvControllerAction.HTTPSListenerArn
      Priority: !GetAtt HTTPSRulePriorityAction.Priority

  HTTPRulePriorityAction:
    Condition: HTTPLoadBalancer
    Type: Custom::RulePriorityFunction
    Properties:
      ServiceToken: !GetAtt RulePriorityFunction.Arn
      ListenerArn: !GetAtt EnvControllerAction.HTTPListenerArn

  HTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HTTPLoadBalancer
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
      {{- if .AllowedSourceIps}}
        - Field: 'source-ip'
          SourceIpConfig:
            Values:
            {{- range $sourceIP := .AllowedSourceIps}}
            - {{$sourceIP}}
            {{- end}}
      {{- end}}
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              !If
                - HTTPRootPath
                -
                  - "/*"
                -
                  - !Sub "/${RulePath}"
                  - !Sub "/${RulePath}/*"
      ListenerArn: !GetAtt EnvControllerAction.HTTPListenerArn
      Priority: 
        !If
          - HTTPRootPath
          - 50000 # This is the max rule priority. Since this rule evaluates true for everything, we make sure it is last
          - !GetAtt HTTPRulePriorityAction.Priority

  # Force a conditional dependency from the ECS service on the listener rules.
  # Our service depends on our HTTP/S listener to be set up before it can
  # be created. But, since our environment is either HTTPS or not, we
  # have a conditional dependency (we have to wait for the HTTPS listener
  # to be created or the HTTP listener to be created). In order to have a
  # conditional dependency, we use the WaitHandle resource as a way to force
  # a single dependency. The Ref in the WaitCondition implicitly creates a conditional
  # dependency - if the condition is satisfied (HTTPLoadBalancer) - the ref resolves
  # the HTTPWaitHandle, which depends on the HTTPListenerRule.

  HTTPSWaitHandle:
    Condition: HTTPSLoadBalancer
    DependsOn: HTTPSListenerRule
    Type: AWS::CloudFormation::WaitConditionHandle

  HTTPWaitHandle:
    Condition: HTTPLoadBalancer
    DependsOn: HTTPListenerRule
    Type: AWS::CloudFormation::WaitConditionHandle

  # We don't actually need to wait for the condition to
  # be completed, that's why we set a count of 0. The timeout
  # is a required field, but useless, so we set it to one.
  WaitUntilListenerRuleIsCreated:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [HTTPLoadBalancer, !Ref HTTPWaitHandle, !Ref HTTPSWaitHandle]
      Timeout: "1"
      Count: 0

{{include "addons" . | indent 2}}
