# Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
# the License. A copy of the License is located at
#     http://aws.amazon.com/apache2.0/
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: CodePipeline for {{$.AppName}}
Parameters:
  # TODO: #273 make this source-provider-agnostic
  GitHubAccessTokenSecretId:
    Description: The secretId of the GitHub Personal Access token stored in the Secrets Manager
    Type: String
    Default: {{$.Source.GitHubPersonalAccessTokenSecretID}}
Resources:
  BuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess' # for env ls
        - 'arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess' # for service package
      Policies:
        - PolicyName: assume-env-manager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            {{- range $stage := .Stages}}
            - Effect: Allow
              Resource: 'arn:aws:iam::{{$stage.AccountID}}:role/{{$.AppName}}-{{$stage.Name}}-EnvManagerRole'
              Action:
              - sts:AssumeRole
            {{- end }}
  BuildProjectPolicy:
    Type: AWS::IAM::Policy
    DependsOn: BuildProjectRole
    Properties:
      PolicyName: !Sub ${AWS::StackName}-CodeBuildPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            # TODO: This might not be necessary. We may only need the bucket
            # that is in the same region as the pipeline.
            # Loop through all the artifact buckets created in the stackset
            Resource:{{range .ArtifactBuckets}}
              - !Join ['', ['arn:aws:s3:::', '{{.BucketName}}']]
              - !Join ['', ['arn:aws:s3:::', '{{.BucketName}}', '/*']]{{end}}
          - Effect: Allow
            Action:
              # TODO: scope this down if possible
              - kms:*
            # TODO: This might not be necessary. We may only need the KMS key
            # that is in the same region as the pipeline.
            # Loop through all the KMS keys used to en/decrypt artifacts
            # across (cross-regional) pipeline stages, with each stage
            # backed by a (regional) S3 bucket.
            Resource:{{range .ArtifactBuckets}}
              - {{.KeyArn}}{{end}}
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: '*'
          - Effect: Allow
            Action:
              - ecr:DescribeImageScanFindings
              - ecr:GetLifecyclePolicyPreview
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:DescribeImages
              - ecr:ListTagsForResource
              - ecr:BatchCheckLayerAvailability
              - ecr:GetLifecyclePolicy
              - ecr:GetRepositoryPolicy
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
            Resource: '*'
            Condition: {StringEquals: {'ecr:ResourceTag/copilot-application': {{$.AppName}}}}
      Roles:
        - !Ref BuildProjectRole
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-BuildProject
      Description: !Sub Build for ${AWS::StackName}
      # ArtifactKey is the KMS key ID or ARN that is used with the artifact bucket
      # created in the same region as this pipeline.
      EncryptionKey: !ImportValue {{$.AppName}}-ArtifactKey
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE
        Type: LOCAL
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: copilot/buildspec.yml
      TimeoutInMinutes: 60
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  PipelineRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-CodepipelinePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - codepipeline:*
              - iam:ListRoles
              - cloudformation:Describe*
              - cloudFormation:List*
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
              - iam:PassRole
              - s3:ListAllMyBuckets
              - s3:GetBucketLocation
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
            Resource:{{range .ArtifactBuckets}}
              - {{.KeyArn}}{{end}}
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
              - s3:GetObject
              - s3:ListBucket
            Resource:{{range .ArtifactBuckets}}
              - !Join ['', ['arn:aws:s3:::', '{{.BucketName}}']]
              - !Join ['', ['arn:aws:s3:::', '{{.BucketName}}', '/*']]{{end}}
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:{{range $stage := .Stages}}
              - arn:aws:iam::{{$stage.AccountID}}:role/{{$.AppName}}-{{$stage.Name}}-EnvManagerRole{{end}}
      Roles:
        - !Ref PipelineRole
{{- range $index, $stage := .Stages}}
  {{- if $stage.TestCommands}}
  BuildTestCommands{{$stage.Name}}:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: BuildTestCommands-{{$.AppName}}-{{$stage.Name}}
      EncryptionKey: !ImportValue {{$.AppName}}-ArtifactKey
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ComputeType: BUILD_GENERAL1_SMALL
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
              {{- range $index, $command := $stage.TestCommands}}
                - {{$command}}
              {{- end}}
  {{- end}}
{{- end}}
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - PipelineRole
      - PipelineRolePolicy
    Properties:
      ArtifactStores:{{range .ArtifactBuckets}}
        - Region: {{.Region}}
          ArtifactStore:
            Type: S3
            Location: {{.BucketName}}
            EncryptionKey:
              Id: {{.KeyArn}}
              Type: KMS{{end}}
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Ref AWS::StackName
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCodeFor-{{$.AppName}}
              ActionTypeId:
                Category: Source
                # TODO: #273 For CodeCommit, this needs to be AWS. Let's do that later
                Owner: ThirdParty
                Version: 1
                Provider: {{.Source.ProviderName}}
              Configuration:
                # TODO: #273 For now this set of configurations is GitHub-specific,
                # change it to be more generic
                Owner: {{$.Source.Owner}}
                Repo: {{$.Source.Repository}}
                Branch: {{index $.Source.Properties "branch"}}
                # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager
                # Use the *entire* SecretString with version AWSCURRENT
                OAuthToken: !Sub
                    - '{{"{{"}}resolve:secretsmanager:${SecretId}{{"}}"}}'
                    - { SecretId: !Ref GitHubAccessTokenSecretId }
              OutputArtifacts:
                - Name: SCCheckoutArtifact
              RunOrder: 1
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref BuildProject
            RunOrder: 1
            InputArtifacts:
              - Name: SCCheckoutArtifact
            OutputArtifacts:
              - Name: BuildOutput
        {{- $length := len .Stages}}{{if gt $length 0}}{{range $stage := .Stages}}{{$numWorkloads := len $stage.LocalWorkloads}}{{if gt $numWorkloads 0}}
        - Name: DeployTo-{{$stage.Name}}
          Actions:{{if $stage.RequiresApproval }}
            - Name: ApprovePromotionTo-{{$stage.Name}}
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              RunOrder: 1{{end}}{{range $workload := $stage.LocalWorkloads}}
            - Name: CreateOrUpdate-{{$workload}}-{{$stage.Name}}
              Region: {{$stage.Region}}
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-action-reference.html
                ChangeSetName: {{$.AppName}}-{{$stage.Name}}-{{$workload}}
                ActionMode: CREATE_UPDATE
                StackName: {{$.AppName}}-{{$stage.Name}}-{{$workload}}
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: BuildOutput::infrastructure/{{$stage.WorkloadTemplatePath $workload}}
                TemplateConfiguration: BuildOutput::infrastructure/{{$stage.WorkloadTemplateConfigurationPath $workload}}
                # The ARN of the IAM role (in the env account) that
                # AWS CloudFormation assumes when it operates on resources
                # in a stack in an environment account.
                RoleArn: arn:aws:iam::{{$stage.AccountID}}:role/{{$.AppName}}-{{$stage.Name}}-CFNExecutionRole
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 2
              # The ARN of the environment manager IAM role (in the env
              # account) that performs the declared action. This is assumed
              # through the roleArn for the pipeline.
              RoleArn: arn:aws:iam::{{$stage.AccountID}}:role/{{$.AppName}}-{{$stage.Name}}-EnvManagerRole{{end}}{{if $stage.TestCommands}}
            - Name: TestCommands
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildTestCommands{{$stage.Name}}
              RunOrder: 3
              InputArtifacts:
                - Name: SCCheckoutArtifact{{end}}{{end}}{{end}}{{end}}
